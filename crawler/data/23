
http://old-www.cs.dartmouth.edu/~cs50/data/tse/wikipedia/wiki/Database_index.html
2
Database index Wikipedia the free encyclopedia a lang ar a lang kk arab a lang mzn a lang ps a lang ur text decoration none cache key enwiki resourceloader filter minify css d a aa f a dc f be e if window mw mw config set wgCanonicalNamespace wgCanonicalSpecialPageName false wgNamespaceNumber wgPageName Database index wgTitle Database index wgCurRevisionId wgRevisionId wgArticleId wgIsArticle true wgIsRedirect false wgAction view wgUserName null wgUserGroups wgCategories Articles needing additional references from March All articles needing additional references All articles with unsourced statements Articles with unsourced statements from October Database management systems Databases Database index techniques wgBreakFrames false wgPageContentLanguage en wgPageContentModel wikitext wgSeparatorTransformTable wgDigitTransformTable wgDefaultDateFormat dmy wgMonthNames January February March April May June July August September October November December wgMonthNamesShort Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec wgRelevantPageName Database index wgIsProbablyEditable true wgRestrictionEdit wgRestrictionMove wgWikiEditorEnabledModules toolbar true dialogs true hidesig true templateEditor false templates false preview false previewDialog false publish false toc false wgBetaFeaturesFeatures wgVisualEditor isPageWatched false magnifyClipIconURL bits wikimedia org static wmf skins common images magnify clip png pageLanguageCode en pageLanguageDir ltr svgMaxSize wikilove recipient wikilove anon wgGuidedTourHelpGuiderUrl Help Guided tours guider wgFlowTermsOfUseEdit By saving changes you agree to our u Ca class external text href wikimediafoundation org wiki Terms of use u ETerms of Use u C a u E and agree to irrevocably release your text under the u Ca rel nofollow class external text href creativecommons org licenses by sa u ECC BY SA License u C a u E and u Ca class external text href en wikipedia org wiki Wikipedia Text of the GNU Free Documentation License u EGFDL u C a u E wgULSAcceptLanguageList en us en wgULSCurrentAutonym English wgFlaggedRevsParams tags status levels quality pristine wgStableRevisionId null wgCategoryTreePageCategoryOptions mode hideprefix showcount true namespaces false wgNoticeProject wikipedia wgWikibaseItemId Q if window mw mw loader implement user options function mw user options set ccmeonemails cols date default diffonly disablemail editfont default editondblclick editsectiononrightclick enotifminoredits enotifrevealaddr enotifusertalkpages enotifwatchlistpages extendwatchlist fancysig forceeditsummary gender unknown hideminor hidepatrolled imagesize math minordefault newpageshidepatrolled nickname norollbackdiff numberheadings previewonfirst previewontop rcdays rclimit rememberpassword rows showhiddencats false shownumberswatching showtoolbar skin vector stubthreshold thumbsize underline uselivepreview usenewrc watchcreations watchdefault watchdeletion watchlistdays watchlisthideanons watchlisthidebots watchlisthideliu watchlisthideminor watchlisthideown watchlisthidepatrolled watchmoves wllimit useeditwarning prefershttps flaggedrevssimpleui flaggedrevsstable flaggedrevseditdiffs true flaggedrevsviewdiffs false usebetatoolbar usebetatoolbar cgd visualeditor enable visualeditor enable experimental visualeditor betatempdisable wikilove enabled echo subscriptions web page review true echo subscriptions email page review false ep showtoplink false ep bulkdelorgs false ep bulkdelcourses true ep showdyk true echo subscriptions web education program true echo subscriptions email education program false echo notify show link true echo show alert true echo email frequency echo email format html echo subscriptions email system true echo subscriptions web system true echo subscriptions email other false echo subscriptions web other true echo subscriptions email edit user talk false echo subscriptions web edit user talk true echo subscriptions email reverted false echo subscriptions web reverted true echo subscriptions email article linked false echo subscriptions web article linked false echo subscriptions email mention false echo subscriptions web mention true echo subscriptions web edit thank true echo subscriptions email edit thank false echo subscriptions web flow discussion true echo subscriptions email flow discussion false gettingstarted task toolbar show intro true uls preferences language en variant gan gan variant iu iu variant kk kk variant ku ku variant shi shi variant sr sr variant tg tg variant uz uz variant zh zh searchNs true searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false gadget teahouse gadget ReferenceTooltips gadget DRN wizard gadget charinsert gadget mySandbox variant en mw loader implement user tokens function mw user tokens set editToken patrolToken false watchToken false cache key enwiki resourceloader filter minify js e d ede d d dc cd if window mw mw loader load mediawiki page startup mediawiki legacy wikibits mediawiki legacy ajax ext centralauth centralautologin skins vector compactPersonalBar defaultTracking ext visualEditor viewPageTarget init ext uls init ext uls interface wikibase client init ext centralNotice bannerController skins vector js body behavior url w static wmf skins vector csshover min htc Database index From Wikipedia the free encyclopedia Jump to navigation search This article needs additional citations for verification Please help improve this article by adding citations to reliable sources Unsourced material may be challenged and removed March A database index is a data structure that improves the speed of data retrieval operations on a database table at the cost of additional writes and the use of more storage space to maintain the extra copy of data Indexes are used to quickly locate data without having to search every row in a database table every time a database table is accessed Indexes can be created using one or more columns of a database table providing the basis for both rapid random lookups and efficient access of ordered records An index is a copy of select columns of data from a table that can be searched very efficiently that also includes a low level disk block address or direct link to the complete row of data it was copied from Some databases extend the power of indexing by allowing indices to be created on functions or expressions For example an index could be created on upper last name which would only store the upper case versions of the last name field in the index Another option sometimes supported is the use of filtered indices where index entries are created only for those records that satisfy some conditional expression A further aspect of flexibility is to permit indexing on user defined functions as well as expressions formed from an assortment of built in functions Contents Usage Support for fast lookup Policing the database constraints Index architecture Non clustered Clustered Cluster Column order Applications and limitations Types of indexes Bitmap index Dense index Sparse index Reverse index Index implementations Index concurrency control Covering index Standardization See also References Usage edit Support for fast lookup edit Most database software includes indexing technology that enables sub linear time lookup to improve performance as linear search is inefficient for large databases Suppose a database contains N data items and it is desired to retrieve one of them based on the value of one of the fields A na ve implementation would retrieve and examine each item until a match was not found A successful lookup would retrieve half the objects on average an unsuccessful lookup all of them for each attempt This means that the number of operations in the worst case is O N or linear time Since databases commonly contain millions of objects and since lookup is a common operation it is often desirable to improve on this performance An index is any data structure that improves the performance of lookup There are many different data structures used for this purpose and in fact a substantial proportion of the field of computer science is devoted to the design and analysis of index data structures citation needed There are complex design trade offs involving lookup performance index size and index update performance Many index designs exhibit logarithmic O log N lookup performance and in some applications it is possible to achieve flat O performance Policing the database constraints edit Indexes are used to police database constraints such as UNIQUE EXCLUSION PRIMARY KEY and FOREIGN KEY An index may be declared as UNIQUE which creates an implicit constraint on the underlying table Database systems usually implicitly create an index on a set of columns declared PRIMARY KEY and some are capable of using an already existing index to police this constraint Many database systems require that both referencing and referenced sets of columns in a FOREIGN KEY constraint are indexed thus improving performance of inserts updates and deletes to the tables participating in the constraint Some database systems support EXCLUSION constraint which ensures that for a newly inserted or updated record a certain predicate would hold for no other record This may be used to implement a UNIQUE constraint with equality predicate or more complex constraints like ensuring that no overlapping time ranges or no intersecting geometry objects would be stored in the table An index supporting fast searching for records satisfying the predicate is required to police such a constraint Index architecture edit Non clustered edit The data is present in arbitrary order but the logical ordering is specified by the index The data rows may be spread throughout the table regardless of the value of the indexed column or expression The non clustered index tree contains the index keys in sorted order with the leaf level of the index containing the pointer to the record page and the row number in the data page in page organized engines row offset in file organized engines In a non clustered index The physical order of the rows is not the same as the index order The indexed columns are typically non primary key columns used in JOIN WHERE and ORDER BY clauses There can be more than one non clustered index on a database table Clustered edit Clustering alters the data block into a certain distinct order to match the index resulting in the row data being stored in order Therefore only one clustered index can be created on a given database table Clustered indices can greatly increase overall speed of retrieval but usually only where the data is accessed sequentially in the same or reverse order of the clustered index or when a range of items is selected Since the physical records are in this sort order on disk the next row item in the sequence is immediately before or after the last one and so fewer data block reads are required The primary feature of a clustered index is therefore the ordering of the physical data rows in accordance with the index blocks that point to them Some databases separate the data and index blocks into separate files others put two completely different data blocks within the same physical file s Cluster edit When multiple databases and multiple tables are joined it s referred to as a cluster not to be confused with clustered index described above The records for the tables sharing the value of a cluster key shall be stored together in the same or nearby data blocks This may improve the joins of these tables on the cluster key since the matching records are stored together and less I O is required to locate them The data layout in the tables which are parts of the cluster is defined by the cluster configuration A cluster can be keyed with a B Tree index or a hash table The data block in which the table record will be stored is defined by the value of the cluster key Column order edit The order in which columns are listed in the index definition is important It is possible to retrieve a set of row identifiers using only the first indexed column However it is not possible or efficient on most databases to retrieve the set of row identifiers using only the second or greater indexed column For example imagine a phone book that is organized by city first then by last name and then by first name If you are given the city you can easily extract the list of all phone numbers for that city However in this phone book it would be very tedious to find all the phone numbers for a given last name You would have to look within each city s section for the entries with that last name Some databases can do this others just won t use the index In the phone book example with an composite index created on the columns city last name first name if we search by giving exact values for all the three fields the search time will be minimal But if we provide the values for city and first name only the search will use only the city field to retrieve all the records matched And then a sequential lookup will be performed for checking the matching with first name So to improve the performance one must ensure that the index is created on the order of search columns Applications and limitations edit Indices are useful for many applications but come with some limitations Consider the following SQL statement SELECT first name FROM people WHERE last name Smith To process this statement without an index the database software must look at the last name column on every row in the table this is known as a full table scan With an index the database simply follows the B tree data structure until the Smith entry has been found this is much less computationally expensive than a full table scan Consider this SQL statement SELECT email address FROM customers WHERE email address LIKE yahoo com This query would yield an email address for every customer whose email address ends with yahoo com but even if the email address column has been indexed the database must perform a full index scan This is because the index is built with the assumption that words go from left to right With a wildcard at the beginning of the search term the database software is unable to use the underlying B tree data structure in other words the WHERE clause is not sargable This problem can be solved through the addition of another index created on reverse email address and a SQL query like this SELECT email address FROM customers WHERE reverse email address LIKE reverse yahoo com This puts the wild card at the right most part of the query now moc oohay which the index on reverse email address can satisfy But when the wildcard characters are used on both sides of the search word as yahoo com the index available on this field will not be used Rather only a sequential search will be performed which will take O N time So index must be available on the columns on which the lookup is performed Types of indexes edit Bitmap index edit Main article Bitmap index A bitmap index is a special kind of index that stores the bulk of its data as bit arrays bitmaps and answers most queries by performing bitwise logical operations on these bitmaps The most commonly used indexes such as B trees are most efficient if the values they index do not repeat or repeat a smaller number of times In contrast the bitmap index is designed for cases where the values of a variable repeat very frequently For example the gender field in a customer database usually contains two distinct values male or female For such variables the bitmap index can have a significant performance advantage over the commonly used trees Dense index edit A dense index in databases is a file with pairs of keys and pointers for every record in the data file Every key in this file is associated with a particular pointer to a record in the sorted data file In clustered indices with duplicate keys the dense index points to the first record with that key Sparse index edit A sparse index in databases is a file with pairs of keys and pointers for every block in the data file Every key in this file is associated with a particular pointer to the block in the sorted data file In clustered indices with duplicate keys the sparse index points to the lowest search key in each block Reverse index edit Main article Reverse index A reverse key index reverses the key value before entering it in the index E g the value becomes in the index Reversing the key value is particularly useful for indexing data such as sequence numbers where new key values monotonically increase Index implementations edit Indices can be implemented using a variety of data structures Popular indices include balanced trees B trees and hashes In Microsoft SQL Server the leaf node of the clustered index corresponds to the actual data not simply a pointer to data that resides elsewhere as is the case with a non clustered index Each relation can have a single clustered index and many unclustered indices Index concurrency control edit Main article Index locking An index is typically being accessed concurrently by several transactions and processes and thus needs concurrency control While in principle indexes can utilize the common database concurrency control methods specialized concurrency control methods for indexes exist which are applied in conjunction with the common methods for a substantial performance gain Covering index edit In most cases an index is used to quickly locate the data record s from which the required data is read In other words the index is only used to locate data records in the table and not to return data A covering index is a special case where the index itself contains the required data field s and can return the data Consider the following table other fields omitted ID Name Other Fields Plug Lamp Fuse To find the Name for ID an index on ID will be useful but the record must still be read to get the Name However an index on ID Name contains the required data field and eliminates the need to look up the record A covering index can dramatically speed up data retrieval but may itself be large due to the additional keys which slow down data insertion amp update To reduce such index size some systems allow non key fields to be included in the index Non key fields are not themselves part of the index ordering but only included at the leaf level allowing for a covering index with less overall index size Standardization edit There is no standard about creating indexes because the ISO SQL Standard does not cover physical aspects Indexes are one of the physical parts of database conception among others like storage tablespace or filegroups RDBMS vendors all give a CREATE INDEX syntax with some specific options which depends on functionalities they provide to customers See also edit Index locking Index search engine References edit PostgreSQL Documentation CREATE TABLE Overview of Clusters Oracle Database Concepts g Release Database Systems The Complete Book Hector Garcia Molina Jeffrey D Ullman Jennifer D Widom Gavin Powell Chapter Building Fast Performing Database Models Beginning Database Design ISBN Wrox Publishing Clustered Index Structures SQL Server Books Online September Daren Bieniek Randy Dess Mike Hotek Javier Loria Adam Machanic Antonio Soto Adolfo Wiernik January Chapter Creating Indices SQL Server Implementation and Management Microsoft Press v t e Database management systems Database models Database normalization Database storage Distributed DBMS Federated database system Referential integrity Relational algebra Relational calculus Relational database Relational DBMS Relational model Object relational database Transaction processing Concepts Database ACID CRUD Null Candidate key Foreign key Primary key Superkey Surrogate key Armstrong s axioms Objects Relation table column row View Transaction Log Trigger Index Stored procedure Cursor Partition Components Concurrency control Data dictionary JDBC XQJ ODBC Query language Query optimizer Query plan Functions Administration and automation Query optimization Replication Database products Object oriented comparison Relational comparison Document oriented Graph database NoSQL NewSQL Retrieved from http en wikipedia org w index php title Database index amp oldid Categories Database management systems Databases Database index techniques Hidden categories Articles needing additional references from March All articles needing additional references All articles with unsourced statements Articles with unsourced statements from October Navigation menu Personal tools Create account Log in Namespaces Article Talk Variants Views Read Edit View history Actions Search Navigation Main page Contents Featured content Current events Random article Donate to Wikipedia Wikimedia Shop Interaction Help About Wikipedia Community portal Recent changes Contact page Tools What links here Related changes Upload file Special pages Permanent link Page information Data item Cite this page Print export Create a book Download as PDF Printable version Languages Catal e tina Deutsch Espa ol Esperanto Fran ais Hrvatski Italiano Latvie u Nederlands Polski Portugu s Suomi T rk e Edit links This page was last modified on March at Text is available under the Creative Commons Attribution ShareAlike License additional terms may apply By using this site you agree to the Terms of Use and Privacy Policy Wikipedia is a registered trademark of the Wikimedia Foundation Inc a non profit organization Privacy policy About Wikipedia Disclaimers Contact Wikipedia Developers Mobile view if window mw mw loader state site loading user ready user groups ready if window mw mw loader load ext cite mobile desktop mediawiki action view postEdit mediawiki user mediawiki hidpi mediawiki page ready mediawiki searchSuggest ext gadget teahouse ext gadget ReferenceTooltips ext gadget DRN wizard ext gadget charinsert mw MwEmbedSupport style ext navigationTiming schema UniversalLanguageSelector ext uls eventlogger ext uls interlanguage skins vector collapsibleNav null true 