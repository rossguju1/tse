
http://old-www.cs.dartmouth.edu/~cs50/data/tse/wikipedia/wiki/Programming_language.html
2
Programming language Wikipedia the free encyclopedia a lang ar a lang kk arab a lang mzn a lang ps a lang ur text decoration none cache key enwiki resourceloader filter minify css d a aa f a dc f be e if window mw mw config set wgCanonicalNamespace wgCanonicalSpecialPageName false wgNamespaceNumber wgPageName Programming language wgTitle Programming language wgCurRevisionId wgRevisionId wgArticleId wgIsArticle true wgIsRedirect false wgAction view wgUserName null wgUserGroups wgCategories Pages containing cite templates with deprecated parameters All articles with dead external links Articles with dead external links from June Use dmy dates from April All accuracy disputes Articles with disputed statements from March All articles with unsourced statements Articles with unsourced statements from October Articles with unsourced statements from March Articles using fixed number of columns in reflist Articles with Open Directory Project links Programming language topics Notation wgBreakFrames false wgPageContentLanguage en wgPageContentModel wikitext wgSeparatorTransformTable wgDigitTransformTable wgDefaultDateFormat dmy wgMonthNames January February March April May June July August September October November December wgMonthNamesShort Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec wgRelevantPageName Programming language wgIsProbablyEditable true wgRestrictionEdit wgRestrictionMove wgWikiEditorEnabledModules toolbar true dialogs true hidesig true templateEditor false templates false preview false previewDialog false publish false toc false wgBetaFeaturesFeatures wgVisualEditor isPageWatched false magnifyClipIconURL bits wikimedia org static wmf skins common images magnify clip png pageLanguageCode en pageLanguageDir ltr svgMaxSize wikilove recipient wikilove anon wgGuidedTourHelpGuiderUrl Help Guided tours guider wgFlowTermsOfUseEdit By saving changes you agree to our u Ca class external text href wikimediafoundation org wiki Terms of use u ETerms of Use u C a u E and agree to irrevocably release your text under the u Ca rel nofollow class external text href creativecommons org licenses by sa u ECC BY SA License u C a u E and u Ca class external text href en wikipedia org wiki Wikipedia Text of the GNU Free Documentation License u EGFDL u C a u E wgULSAcceptLanguageList nl wgULSCurrentAutonym English wgFlaggedRevsParams tags status levels quality pristine wgStableRevisionId null wgCategoryTreePageCategoryOptions mode hideprefix showcount true namespaces false wgNoticeProject wikipedia wgWikibaseItemId Q if window mw mw loader implement user options function mw user options set ccmeonemails cols date default diffonly disablemail editfont default editondblclick editsectiononrightclick enotifminoredits enotifrevealaddr enotifusertalkpages enotifwatchlistpages extendwatchlist fancysig forceeditsummary gender unknown hideminor hidepatrolled imagesize math minordefault newpageshidepatrolled nickname norollbackdiff numberheadings previewonfirst previewontop rcdays rclimit rememberpassword rows showhiddencats false shownumberswatching showtoolbar skin vector stubthreshold thumbsize underline uselivepreview usenewrc watchcreations watchdefault watchdeletion watchlistdays watchlisthideanons watchlisthidebots watchlisthideliu watchlisthideminor watchlisthideown watchlisthidepatrolled watchmoves wllimit useeditwarning prefershttps flaggedrevssimpleui flaggedrevsstable flaggedrevseditdiffs true flaggedrevsviewdiffs false usebetatoolbar usebetatoolbar cgd visualeditor enable visualeditor enable experimental visualeditor enable mwmath visualeditor betatempdisable wikilove enabled echo subscriptions web page review true echo subscriptions email page review false ep showtoplink false ep bulkdelorgs false ep bulkdelcourses true ep showdyk true echo subscriptions web education program true echo subscriptions email education program false echo notify show link true echo show alert true echo email frequency echo email format html echo subscriptions email system true echo subscriptions web system true echo subscriptions email other false echo subscriptions web other true echo subscriptions email edit user talk false echo subscriptions web edit user talk true echo subscriptions email reverted false echo subscriptions web reverted true echo subscriptions email article linked false echo subscriptions web article linked false echo subscriptions email mention false echo subscriptions web mention true echo subscriptions web edit thank true echo subscriptions email edit thank false echo subscriptions web flow discussion true echo subscriptions email flow discussion false gettingstarted task toolbar show intro true uls preferences language en variant gan gan variant iu iu variant kk kk variant ku ku variant shi shi variant sr sr variant tg tg variant uz uz variant zh zh searchNs true searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false gadget teahouse gadget ReferenceTooltips gadget DRN wizard gadget charinsert gadget mySandbox variant en mw loader implement user tokens function mw user tokens set editToken patrolToken false watchToken false cache key enwiki resourceloader filter minify js eace e aee f f if window mw mw loader load mediawiki page startup mediawiki legacy wikibits mediawiki legacy ajax ext centralauth centralautologin ext visualEditor viewPageTarget init ext uls init ext uls interface wikibase client init ext centralNotice bannerController skins vector js body behavior url w static wmf skins vector csshover min htc Programming language From Wikipedia the free encyclopedia Jump to navigation search An example of source code written in the Java programming language which will print the message Hello World to the standard output when it is compiled and then run by the Java Virtual Machine A programming language is an artificial language designed to communicate instructions to a machine particularly a computer Programming languages can be used to create programs that control the behavior of a machine and or to express algorithms The earliest programming languages preceded the invention of the computer and were used to direct the behavior of machines such as Jacquard looms and player pianos Thousands of different programming languages have been created mainly in the computer field and many more still are being created every year Many programming languages require computation to be specified in an imperative form i e as a sequence of operations to perform while other languages utilize other forms of program specification such as the declarative form i e the desired result is specified not how to achieve it The description of a programming language is usually split into the two components of syntax form and semantics meaning Some languages are defined by a specification document for example the C programming language is specified by an ISO Standard while other languages such as Perl have a dominant implementation that is treated as a reference Contents Definitions History Early developments Refinement Consolidation and growth Elements Syntax Semantics Static semantics Dynamic semantics Type system Typed versus untyped languages Static versus dynamic typing Weak and strong typing Standard library and run time system Design and implementation Specification Implementation Usage Measuring language usage Taxonomies See also References Further reading External links Definitions edit A programming language is a notation for writing programs which are specifications of a computation or algorithm Some but not all authors restrict the term programming language to those languages that can express all possible algorithms Traits often considered important for what constitutes a programming language include Function and target A computer programming language is a language used to write computer programs which involve a computer performing some kind of computation or algorithm and possibly control external devices such as printers disk drives robots and so on For example PostScript programs are frequently created by another program to control a computer printer or display More generally a programming language may describe computation on some possibly abstract machine It is generally accepted that a complete specification for a programming language includes a description possibly idealized of a machine or processor for that language In most practical contexts a programming language involves a computer consequently programming languages are usually defined and studied this way Programming languages differ from natural languages in that natural languages are only used for interaction between people while programming languages also allow humans to communicate instructions to machines Abstractions Programming languages usually contain abstractions for defining and manipulating data structures or controlling the flow of execution The practical necessity that a programming language support adequate abstractions is expressed by the abstraction principle this principle is sometimes formulated as recommendation to the programmer to make proper use of such abstractions Expressive power The theory of computation classifies languages by the computations they are capable of expressing All Turing complete languages can implement the same set of algorithms ANSI ISO SQL and Charity are examples of languages that are not Turing complete yet often called programming languages Markup languages like XML HTML or troff which define structured data are not usually considered programming languages Programming languages may however share the syntax with markup languages if a computational semantics is defined XSLT for example is a Turing complete XML dialect Moreover LaTeX which is mostly used for structuring documents also contains a Turing complete subset The term computer language is sometimes used interchangeably with programming language However the usage of both terms varies among authors including the exact scope of each One usage describes programming languages as a subset of computer languages In this vein languages used in computing that have a different goal than expressing computer programs are generically designated computer languages For instance markup languages are sometimes referred to as computer languages to emphasize that they are not meant to be used for programming Another usage regards programming languages as theoretical constructs for programming abstract machines and computer languages as the subset thereof that runs on physical computers which have finite hardware resources John C Reynolds emphasizes that formal specification languages are just as much programming languages as are the languages intended for execution He also argues that textual and even graphical input formats that affect the behavior of a computer are programming languages despite the fact they are commonly not Turing complete and remarks that ignorance of programming language concepts is the reason for many flaws in input formats History edit Main articles History of programming languages and Programming language generations Early developments edit The first programming languages designed to communicate instructions to a computer were written in the s An early high level programming language to be designed for a computer was Plankalk l developed for the German Z by Konrad Zuse between and However it was not implemented until and John Mauchly s Short Code proposed in was one of the first high level languages ever developed for an electronic computer Unlike machine code Short Code statements represented mathematical expressions in understandable form However the program had to be translated into machine code every time it ran making the process much slower than running the equivalent machine code The Manchester Mark ran programs written in Autocode from At the University of Manchester Alick Glennie developed Autocode in the early s A programming language it used a compiler to automatically convert the language into machine code The first code and compiler was developed in for the Mark computer at the University of Manchester and is considered to be the first compiled high level programming language The second autocode was developed for the Mark by R A Brooker in and was called the Mark Autocode Brooker also developed an autocode for the Ferranti Mercury in the s in conjunction with the University of Manchester The version for the EDSAC was devised by D F Hartley of University of Cambridge Mathematical Laboratory in Known as EDSAC Autocode it was a straight development from Mercury Autocode adapted for local circumstances and was noted for its object code optimisation and source language diagnostics which were advanced for the time A contemporary but separate thread of development Atlas Autocode was developed for the University of Manchester Atlas machine Another early programming language was devised by Grace Hopper in the US called FLOW MATIC It was developed for the UNIVAC I at Remington Rand during the period from until Hopper found that business data processing customers were uncomfortable with mathematical notation and in early she and her team wrote a specification for an English programming language and implemented a prototype The FLOW MATIC compiler became publicly available in early and was substantially complete in Flow Matic was a major influence in the design of COBOL since only it and its direct descendent AIMACO were in actual use at the time The language Fortran was developed at IBM in the mid s and became the first widely used high level general purpose programming language Refinement edit The period from the s to the late s brought the development of the major language paradigms now in use though many aspects were refinements of ideas in the very first Third generation programming languages APL introduced array programming and influenced functional programming PL I originally called NPL was designed in the early s to incorporate the best ideas from FORTRAN and COBOL with block structures taken from ALGOL In the s Simula was the first language designed to support object oriented programming in the mid s Smalltalk followed with the first purely object oriented language C was developed between and as a system programming language and remains popular Prolog designed in was the first logic programming language In ML built a polymorphic type system on top of Lisp pioneering statically typed functional programming languages Each of these languages spawned an entire family of descendants and most modern languages count at least one of them in their ancestry The s and s also saw considerable debate over the merits of structured programming and whether programming languages should be designed to support it Edsger Dijkstra in a famous letter published in the Communications of the ACM argued that GOTO statements should be eliminated from all higher level programming languages The s and s also saw expansion of techniques that reduced the footprint of a program as well as improved productivity of the programmer and user The card deck for an early GL was a lot smaller for the same functionality expressed in a GL deck Consolidation and growth edit A selection of textbooks that teach programming in languages both popular and obscure These are only a few of the thousands of programming languages and dialects that have been designed in history The s were years of relative consolidation C combined object oriented and systems programming The United States government standardized Ada a systems programming language derived from Pascal and intended for use by defense contractors In Japan and elsewhere vast sums were spent investigating so called fifth generation languages that incorporated logic programming constructs The functional languages community moved to standardize ML and Lisp Rather than inventing new paradigms all of these movements elaborated upon the ideas invented in the previous decade One important trend in language design for programming large scale systems during the s was an increased focus on the use of modules or large scale organizational units of code Modula Ada and ML all developed notable module systems in the s although other languages such as PL I already had extensive support for modular programming Module systems were often wedded to generic programming constructs The rapid growth of the Internet in the mid s created opportunities for new languages Perl originally a Unix scripting tool first released in became common in dynamic websites Java came to be used for server side programming and bytecode virtual machines became popular again in commercial settings with their promise of Write once run anywhere UCSD Pascal had been popular for a time in the early s These developments were not fundamentally novel rather they were refinements to existing languages and paradigms and largely based on the C family of programming languages Programming language evolution continues in both industry and research Current directions include security and reliability verification new kinds of modularity mixins delegates aspects and database integration such as Microsoft s LINQ The GLs are examples of languages which are domain specific such as SQL which manipulates and returns sets of data rather than the scalar values which are canonical to most programming languages Perl for example with its here document can hold multiple GL programs as well as multiple JavaScript programs in part of its own perl code and use variable interpolation in the here document to support multi language programming Elements edit All programming languages have some primitive building blocks for the description of data and the processes or transformations applied to them like the addition of two numbers or the selection of an item from a collection These primitives are defined by syntactic and semantic rules which describe their structure and meaning respectively Syntax edit Parse tree of Python code with inset tokenization Syntax highlighting is often used to aid programmers in recognizing elements of source code The language above is Python Main article Syntax programming languages A programming language s surface form is known as its syntax Most programming languages are purely textual they use sequences of text including words numbers and punctuation much like written natural languages On the other hand there are some programming languages which are more graphical in nature using visual relationships between symbols to specify a program The syntax of a language describes the possible combinations of symbols that form a syntactically correct program The meaning given to a combination of symbols is handled by semantics either formal or hard coded in a reference implementation Since most languages are textual this article discusses textual syntax Programming language syntax is usually defined using a combination of regular expressions for lexical structure and Backus Naur Form for grammatical structure Below is a simple grammar based on Lisp expression atom list atom number symbol number symbol A Z a z list expression This grammar specifies the following an expression is either an atom or a list an atom is either a number or a symbol a number is an unbroken sequence of one or more decimal digits optionally preceded by a plus or minus sign a symbol is a letter followed by zero or more of any characters excluding whitespace and a list is a matched pair of parentheses with zero or more expressions inside it The following are examples of well formed token sequences in this grammar and a b c Not all syntactically correct programs are semantically correct Many syntactically correct programs are nonetheless ill formed per the language s rules and may depending on the language specification and the soundness of the implementation result in an error on translation or execution In some cases such programs may exhibit undefined behavior Even when a program is well defined within a language it may still have a meaning that is not intended by the person who wrote it Using natural language as an example it may not be possible to assign a meaning to a grammatically correct sentence or the sentence may be false Colorless green ideas sleep furiously is grammatically well formed but has no generally accepted meaning John is a married bachelor is grammatically well formed but expresses a meaning that cannot be true The following C language fragment is syntactically correct but performs operations that are not semantically defined the operation p gt gt has no meaning for a value having a complex type and p gt im is not defined because the value of p is the null pointer complex p NULL complex abs p sqrt p gt gt p gt im If the type declaration on the first line were omitted the program would trigger an error on compilation as the variable p would not be defined But the program would still be syntactically correct since type declarations provide only semantic information The grammar needed to specify a programming language can be classified by its position in the Chomsky hierarchy The syntax of most programming languages can be specified using a Type grammar i e they are context free grammars Some languages including Perl and Lisp contain constructs that allow execution during the parsing phase Languages that have constructs that allow the programmer to alter the behavior of the parser make syntax analysis an undecidable problem and generally blur the distinction between parsing and execution In contrast to Lisp s macro system and Perl s BEGIN blocks which may contain general computations C macros are merely string replacements and do not require code execution Semantics edit The term Semantics refers to the meaning of languages as opposed to their form syntax Static semantics edit The static semantics defines restrictions on the structure of valid texts that are hard or impossible to express in standard syntactic formalisms For compiled languages static semantics essentially include those semantic rules that can be checked at compile time Examples include checking that every identifier is declared before it is used in languages that require such declarations or that the labels on the arms of a case statement are distinct Many important restrictions of this type like checking that identifiers are used in the appropriate context e g not adding an integer to a function name or that subroutine calls have the appropriate number and type of arguments can be enforced by defining them as rules in a logic called a type system Other forms of static analyses like data flow analysis may also be part of static semantics Newer programming languages like Java and C have definite assignment analysis a form of data flow analysis as part of their static semantics Dynamic semantics edit Main article Semantics of programming languages Once data has been specified the machine must be instructed to perform operations on the data For example the semantics may define the strategy by which expressions are evaluated to values or the manner in which control structures conditionally execute statements The dynamic semantics also known as execution semantics of a language defines how and when the various constructs of a language should produce a program behavior There are many ways of defining execution semantics Natural language is often used to specify the execution semantics of languages commonly used in practice A significant amount of academic research went into formal semantics of programming languages which allow execution semantics to be specified in a formal manner Results from this field of research have seen limited application to programming language design and implementation outside academia Type system edit Main articles Data type Type system and Type safety A type system defines how a programming language classifies values and expressions into types how it can manipulate those types and how they interact The goal of a type system is to verify and usually enforce a certain level of correctness in programs written in that language by detecting certain incorrect operations Any decidable type system involves a trade off while it rejects many incorrect programs it can also prohibit some correct albeit unusual programs In order to bypass this downside a number of languages have type loopholes usually unchecked casts that may be used by the programmer to explicitly allow a normally disallowed operation between different types In most typed languages the type system is used only to type check programs but a number of languages usually functional ones infer types relieving the programmer from the need to write type annotations The formal design and study of type systems is known as type theory Typed versus untyped languages edit A language is typed if the specification of every operation defines types of data to which the operation is applicable with the implication that it is not applicable to other types For example the data represented by this text between the quotes is a string In most programming languages dividing a number by a string has no meaning most modern programming languages will therefore reject any program attempting to perform such an operation In some languages the meaningless operation will be detected when the program is compiled static type checking and rejected by the compiler while in others it will be detected when the program is run dynamic type checking resulting in a run time exception A special case of typed languages are the single type languages These are often scripting or markup languages such as REXX or SGML and have only one data type most commonly character strings which are used for both symbolic and numeric data In contrast an untyped language such as most assembly languages allows any operation to be performed on any data which are generally considered to be sequences of bits of various lengths High level languages which are untyped include BCPL and some varieties of Forth In practice while few languages are considered typed from the point of view of type theory verifying or rejecting all operations most modern languages offer a degree of typing Many production languages provide means to bypass or subvert the type system trading type safety for finer control over the program s execution see casting Static versus dynamic typing edit In static typing all expressions have their types determined prior to when the program is executed typically at compile time For example and are integer expressions they cannot be passed to a function that expects a string or stored in a variable that is defined to hold dates Statically typed languages can be either manifestly typed or type inferred In the first case the programmer must explicitly write types at certain textual positions for example at variable declarations In the second case the compiler infers the types of expressions and declarations based on context Most mainstream statically typed languages such as C C and Java are manifestly typed Complete type inference has traditionally been associated with less mainstream languages such as Haskell and ML However many manifestly typed languages support partial type inference for example Java and C both infer types in certain limited cases Dynamic typing also called latent typing determines the type safety of operations at run time in other words types are associated with run time values rather than textual expressions As with type inferred languages dynamically typed languages do not require the programmer to write explicit type annotations on expressions Among other things this may permit a single variable to refer to values of different types at different points in the program execution However type errors cannot be automatically detected until a piece of code is actually executed potentially making debugging more difficult Lisp Perl Python JavaScript and Ruby are dynamically typed Weak and strong typing edit Weak typing allows a value of one type to be treated as another for example treating a string as a number This can occasionally be useful but it can also allow some kinds of program faults to go undetected at compile time and even at run time Strong typing prevents the above An attempt to perform an operation on the wrong type of value raises an error Strongly typed languages are often termed type safe or safe An alternative definition for weakly typed refers to languages such as Perl and JavaScript which permit a large number of implicit type conversions In JavaScript for example the expression x implicitly converts x to a number and this conversion succeeds even if x is null undefined an Array or a string of letters Such implicit conversions are often useful but they can mask programming errors Strong and static are now generally considered orthogonal concepts but usage in the literature differs Some use the term strongly typed to mean strongly statically typed or even more confusingly to mean simply statically typed Thus C has been called both strongly typed and weakly statically typed It may seem odd to some professional programmers that C could be weakly statically typed However notice that the use of the generic pointer the void pointer does allow for casting of pointers to other pointers without needing to do an explicit cast This is extremely similar to somehow casting an array of bytes to any kind of datatype in C without using an explicit cast such as int or char Standard library and run time system edit Main article Standard library Most programming languages have an associated core library sometimes known as the standard library especially if it is included as part of the published language standard which is conventionally made available by all implementations of the language Core libraries typically include definitions for commonly used algorithms data structures and mechanisms for input and output A language s core library is often treated as part of the language by its users although the designers may have treated it as a separate entity Many language specifications define a core that must be made available in all implementations and in the case of standardized languages this core library may be required The line between a language and its core library therefore differs from language to language Indeed some languages are designed so that the meanings of certain syntactic constructs cannot even be described without referring to the core library For example in Java a string literal is defined as an instance of the java lang String class similarly in Smalltalk an anonymous function expression a block constructs an instance of the library s BlockContext class Conversely Scheme contains multiple coherent subsets that suffice to construct the rest of the language as library macros and so the language designers do not even bother to say which portions of the language must be implemented as language constructs and which must be implemented as parts of a library Design and implementation edit Programming languages share properties with natural languages related to their purpose as vehicles for communication having a syntactic form separate from its semantics and showing language families of related languages branching one from another But as artificial constructs they also differ in fundamental ways from languages that have evolved through usage A significant difference is that a programming language can be fully described and studied in its entirety since it has a precise and finite definition By contrast natural languages have changing meanings given by their users in different communities While constructed languages are also artificial languages designed from the ground up with a specific purpose they lack the precise and complete semantic definition that a programming language has Many programming languages have been designed from scratch altered to meet new needs and combined with other languages Many have eventually fallen into disuse Although there have been attempts to design one universal programming language that serves all purposes all of them have failed to be generally accepted as filling this role The need for diverse programming languages arises from the diversity of contexts in which languages are used Programs range from tiny scripts written by individual hobbyists to huge systems written by hundreds of programmers Programmers range in expertise from novices who need simplicity above all else to experts who may be comfortable with considerable complexity Programs must balance speed size and simplicity on systems ranging from microcontrollers to supercomputers Programs may be written once and not change for generations or they may undergo continual modification Finally programmers may simply differ in their tastes they may be accustomed to discussing problems and expressing them in a particular language One common trend in the development of programming languages has been to add more ability to solve problems using a higher level of abstraction The earliest programming languages were tied very closely to the underlying hardware of the computer As new programming languages have developed features have been added that let programmers express ideas that are more remote from simple translation into underlying hardware instructions Because programmers are less tied to the complexity of the computer their programs can do more computing with less effort from the programmer This lets them write more functionality per time unit Natural language processors have been proposed as a way to eliminate the need for a specialized language for programming However this goal remains distant dubious discuss and its benefits are open to debate Edsger W Dijkstra took the position that the use of a formal language is essential to prevent the introduction of meaningless constructs and dismissed natural language programming as foolish Alan Perlis was similarly dismissive of the idea Hybrid approaches have been taken in Structured English and SQL A language s designers and users must construct a number of artifacts that govern and enable the practice of programming The most important of these artifacts are the language specification and implementation Specification edit Main article Programming language specification The specification of a programming language is intended to provide a definition that the language users and the implementors can use to determine whether the behavior of a program is correct given its source code A programming language specification can take several forms including the following An explicit definition of the syntax static semantics and execution semantics of the language While syntax is commonly specified using a formal grammar semantic definitions may be written in natural language e g as in the C language or a formal semantics e g as in Standard ML and Scheme specifications A description of the behavior of a translator for the language e g the C and Fortran specifications The syntax and semantics of the language have to be inferred from this description which may be written in natural or a formal language A reference or model implementation sometimes written in the language being specified e g Prolog or ANSI REXX The syntax and semantics of the language are explicit in the behavior of the reference implementation Implementation edit Main article Programming language implementation An implementation of a programming language provides a way to execute that program on one or more configurations of hardware and software There are broadly two approaches to programming language implementation compilation and interpretation It is generally possible to implement a language using either technique The output of a compiler may be executed by hardware or a program called an interpreter In some implementations that make use of the interpreter approach there is no distinct boundary between compiling and interpreting For instance some implementations of BASIC compile and then execute the source a line at a time Programs that are executed directly on the hardware usually run several orders of magnitude faster than those that are interpreted in software citation needed One technique for improving the performance of interpreted programs is just in time compilation Here the virtual machine just before execution translates the blocks of bytecode which are going to be used to machine code for direct execution on the hardware Usage edit Thousands of different programming languages have been created mainly in the computing field Programming languages differ from most other forms of human expression in that they require a greater degree of precision and completeness When using a natural language to communicate with other people human authors and speakers can be ambiguous and make small errors and still expect their intent to be understood However figuratively speaking computers do exactly what they are told to do and cannot understand what code the programmer intended to write The combination of the language definition a program and the program s inputs must fully specify the external behavior that occurs when the program is executed within the domain of control of that program On the other hand ideas about an algorithm can be communicated to humans without the precision required for execution by using pseudocode which interleaves natural language with code written in a programming language A programming language provides a structured mechanism for defining pieces of data and the operations or transformations that may be carried out automatically on that data A programmer uses the abstractions present in the language to represent the concepts involved in a computation These concepts are represented as a collection of the simplest elements available called primitives Programming is the process by which programmers combine these primitives to compose new programs or adapt existing ones to new uses or a changing environment Programs for a computer might be executed in a batch process without human interaction or a user might type commands in an interactive session of an interpreter In this case the commands are simply programs whose execution is chained together When a language is used to give commands to a software application such as a Unix shell or other command line interface it is called a scripting language citation needed Measuring language usage edit Main article Measuring programming language popularity It is difficult to determine which programming languages are most widely used and what usage means varies by context One language may occupy the greater number of programmer hours a different one have more lines of code and a third utilize the most CPU time Some languages are very popular for particular kinds of applications For example COBOL is still strong in the corporate data center often on large mainframes Fortran in scientific and engineering applications and C in embedded applications and operating systems Other languages are regularly used to write many different kinds of applications Various methods of measuring language popularity each subject to a different bias over what is measured have been proposed counting the number of job advertisements that mention the language the number of books sold that teach or describe the language estimates of the number of existing lines of code written in the language which may underestimate languages not often found in public searches counts of language references i e to the name of the language found using a web search engine Combining and averaging information from various internet sites langpop com claims that in the ten most popular programming languages are in descending order by overall popularity C Java PHP JavaScript C Python Shell Ruby Objective C and C Taxonomies edit For more details on this topic see Categorical list of programming languages There is no overarching classification scheme for programming languages A given programming language does not usually have a single ancestor language Languages commonly arise by combining the elements of several predecessor languages with new ideas in circulation at the time Ideas that originate in one language will diffuse throughout a family of related languages and then leap suddenly across familial gaps to appear in an entirely different family The task is further complicated by the fact that languages can be classified along multiple axes For example Java is both an object oriented language because it encourages object oriented organization and a concurrent language because it contains built in constructs for running multiple threads in parallel Python is an object oriented scripting language In broad strokes programming languages divide into programming paradigms and a classification by intended domain of use with general purpose programming languages distinguished from domain specific programming languages Traditionally programming languages have been regarded as describing computation in terms of imperative sentences i e issuing commands These are generally called imperative programming languages A great deal of research in programming languages has been aimed at blurring the distinction between a program as a set of instructions and a program as an assertion about the desired answer which is the main feature of declarative programming More refined paradigms include procedural programming object oriented programming functional programming and logic programming some languages are hybrids of paradigms or multi paradigmatic An assembly language is not so much a paradigm as a direct model of an underlying machine architecture By purpose programming languages might be considered general purpose system programming languages scripting languages domain specific languages or concurrent distributed languages or a combination of these Some general purpose languages were designed largely with educational goals A programming language may also be classified by factors unrelated to programming paradigm For instance most programming languages use English language keywords while a minority do not Other languages may be classified as being deliberately esoteric or not See also edit Comparison of programming languages basic instructions Comparison of programming languages Computer programming Computer science and Outline of computer science Educational programming language Invariant based programming Lists of programming languages List of programming language researchers Literate programming Dialect computing Programming language theory Pseudocode Scientific language Software engineering and List of software engineering topics Computer science portal Computer programming portal References edit Ettinger James Jacquard s Web Oxford University Press a b c Aaby Anthony Introduction to Programming Languages In mathematical terms this means the programming language is Turing complete MacLennan Bruce J Principles of Programming Languages Oxford University Press p ISBN ACM SIGPLAN Bylaws of the Special Interest Group on Programming Languages of the Association for Computing Machinery Retrieved June The scope of SIGPLAN is the theory design implementation description and application of computer programming languages languages that permit the specification of a variety of different computations thereby providing the user with significant control immediate or delayed over the computer s operation Dean Tom Programming Robots Building Intelligent Robots Brown University Department of Computer Science Retrieved September R Narasimahan Programming Languages and Computers A Unified Metatheory pp in Franz Alt Morris Rubinoff eds Advances in computers Volume Academic Press ISBN p a complete specification of a programming language must by definition include a specification of a processor idealized if you will for that language the source cites many references to support this statement Ben Ari Mordechai Understanding Programming Languages John Wiley and Sons Programs and languages can be de ned as purely formal mathematical objects However more people are interested in programs than in other mathematical objects such as groups precisely because it is possible to use the program the sequence of symbols to control the execution of a computer While we highly recommend the study of the theory of programming this text will generally limit itself to the study of programs as they are executed on a computer David A Schmidt The structure of typed programming languages MIT Press ISBN p Pierce Benjamin Types and Programming Languages MIT Press p ISBN Digital Equipment Corporation Information Technology Database Language SQL Proposed revised text of DIS ISO IEC Database Language SQL Retrieved June The Charity Development Group December The CHARITY Home Page Retrieved June Charity is a categorical programming language All Charity computations terminate XML in points W C XML is not a programming language Powell Thomas HTML amp XHTML the complete reference McGraw Hill p ISBN X HTML is not a programming language Dykes Lucinda Tittel Ed XML For Dummies th Edition Wiley p ISBN it s a markup language not a programming language What kind of language is XSLT IBM com Retrieved December XSLT is a Programming Language Msdn microsoft com Retrieved December Scott Michael Programming Language Pragmatics Morgan Kaufmann p ISBN XSLT though highly specialized to the transformation of XML is a Turing complete programming language http tobi oetiker ch lshort lshort pdf Syropoulos Apostolos Antonis Tsolomitis Nick Sofroniou Digital typography using LaTeX Springer Verlag p ISBN TeX is not only an excellent typesetting engine but also a real programming language Cite uses deprecated parameters help Robert A Edmunds The Prentice Hall standard glossary of computer terminology Prentice Hall p Pascal Lando Anne Lapujade Gilles Kassel and Fr d ric F rst Towards a General Ontology of Computer Programs ICSOFT pp S K Bajpai Introduction To Computers And C Programming New Age International ISBN X p R Narasimahan Programming Languages and Computers A Unified Metatheory pp in Franz Alt Morris Rubinoff eds Advances in computers Volume Academic Press ISBN p the model for computer languages differs from that for programming languages in only two respects In a computer language there are only finitely many names or registers which can assume only finitely many values or states and these states are not further distinguished in terms of any other attributes author s footnote This may sound like a truism but its implications are far reaching For example it would imply that any model for programming languages by fixing certain of its parameters or features should be reducible in a natural way to a model for computer languages John C Reynolds Some thoughts on teaching programming and programming languages SIGPLAN Notices Volume Issue November p Rojas Ra l et al Plankalk l The First High Level Programming Language and its Implementation Institut f r Informatik Freie Universit t Berlin Technical Report B full text Sebesta W S Concepts of Programming languages M pp ISBN Knuth Donald E Pardo Luis Trabb Early development of programming languages Encyclopedia of Computer Science and Technology Marcel Dekker Peter J Bentley Digitized The Science of Computers and how it Shapes Our World Oxford University Press p Hopper p Sammet p Sammet p Richard L Wexelblat History of Programming Languages Academic Press chapter XIV Fran ois Labelle Programming Language Usage Graph SourceForge Retrieved June This comparison analyzes trends in number of projects hosted by a popular community programming repository During most years of the comparison C leads by a considerable margin in Java overtakes C but the combination of C C still leads considerably Hayes Brian The Semicolon Wars American Scientist Dijkstra Edsger W March Go To Statement Considered Harmful Communications of the ACM doi Retrieved June dead link Tetsuro Fujise Takashi Chikayama Kazuaki Rokusawa Akihiko Nakase December KLIC A Portable Implementation of KL Proc of FGCS ICOT Tokyo December http www icot or jp ARCHIVE HomePage E html KLIC is a portable implementation of a concurrent logic programming language KL Jim Bender March Mini Bibliography on Modules for Functional Programming Languages ReadScheme org Retrieved September Wall Programming Perl ISBN p Michael Sipser Introduction to the Theory of Computation PWS Publishing ISBN X Section Pushdown Automata pp Jeffrey Kegler Perl and Undecidability The Perl Review Papers and prove using respectively Rice s theorem and direct reduction to the halting problem that the parsing of Perl programs is in general undecidable Marty Hall Lecture Notes Macros PostScript version Michael Lee Scott Programming language pragmatics Edition Morgan Kaufmann ISBN p a b c d e f g Andrew Cooke Introduction To Computer Languages Retrieved July Specifically instantiations of generic types are inferred for certain expression forms Type inference in Generic Java the research language that provided the basis for Java s bounded parametric polymorphism extensions is discussed in two informal manuscripts from the Types mailing list Generic Java type inference is unsound Alan Jeffrey December and Sound Generic Java type inference Martin Odersky January C s type system is similar to Java s and uses a similar partial type inference scheme Revised Report on the Algorithmic Language Scheme February Retrieved June Luca Cardelli and Peter Wegner On Understanding Types Data Abstraction and Polymorphism Manuscript Retrieved June Steven R Fischer A history of language Reaktion Books ISBN X p ric L v nez Computer Languages History Jing Huang Artificial Language vs Natural Language IBM in first publishing PL I for example rather ambitiously titled its manual The universal programming language PL I IBM Library The title reflected IBM s goals for unlimited subsetting capability PL I is designed in such a way that one can isolate subsets from it satisfying the requirements of particular applications PL I Encyclopedia of Mathematics Retrieved June Ada and UNCOL had similar early goals Frederick P Brooks Jr The Mythical Man Month Addison Wesley pp Dijkstra Edsger W On the foolishness of natural language programming EWD Perlis Alan September Epigrams on Programming SIGPLAN Notices Vol No pp Milner R M Tofte R Harper and D MacQueen The Definition of Standard ML Revised MIT Press ISBN Cite uses deprecated parameters help Kelsey Richard William Clinger and Jonathan Rees February Section Formal semantics Revised Report on the Algorithmic Language Scheme Retrieved June Cite uses deprecated parameters help ANSI Programming Language Rexx X HOPL an interactive Roster of Programming Languages Australia Murdoch University Retrieved June This site lists languages Abelson Sussman and Sussman Structure and Interpretation of Computer Programs Retrieved March Georgina Swan COBOL turns computerworld com au Retrieved Ed Airey Myths of COBOL Debunked developer com Retrieved Nicholas Enticknap SSL Computer Weekly IT salary survey finance boom drives IT job growth Computerweekly com Retrieved Counting programming languages by book sales Radar oreilly com August Retrieved December Bieman J M Murdock V Finding code on the World Wide Web a preliminary investigation Proceedings First IEEE International Workshop on Source Code Analysis and Manipulation Programming Language Popularity langpop com Retrieved Carl A Gunter Semantics of Programming Languages Structures and Techniques MIT Press ISBN p TUNES Programming Languages Wirth Niklaus Recollections about the development of Pascal Proc nd ACM SIGPLAN conference on history of programming languages doi ISBN Retrieved June Further reading edit See also History of programming languages Further reading Abelson Harold Sussman Gerald Jay Structure and Interpretation of Computer Programs nd ed MIT Press Raphael Finkel Advanced Programming Language Design Addison Wesley Daniel P Friedman Mitchell Wand Christopher T Haynes Essentials of Programming Languages The MIT Press Maurizio Gabbrielli and Simone Martini Programming Languages Principles and Paradigms Springer David Gelernter Suresh Jagannathan Programming Linguistics The MIT Press Ellis Horowitz ed Programming Languages a Grand Tour rd ed Ellis Horowitz Fundamentals of Programming Languages Shriram Krishnamurthi Programming Languages Application and Interpretation online publication Bruce J MacLennan Principles of Programming Languages Design Evaluation and Implementation Oxford University Press John C Mitchell Concepts in Programming Languages Cambridge University Press Benjamin C Pierce Types and Programming Languages The MIT Press Terrence W Pratt and Marvin V Zelkowitz Programming Languages Design and Implementation th ed Prentice Hall Peter H Salus Handbook of Programming Languages vols Macmillan Ravi Sethi Programming Languages Concepts and Constructs nd ed Addison Wesley Michael L Scott Programming Language Pragmatics Morgan Kaufmann Publishers Robert W Sebesta Concepts of Programming Languages th ed Addison Wesley Franklyn Turbak and David Gifford with Mark Sheldon Design Concepts in Programming Languages The MIT Press Peter Van Roy and Seif Haridi Concepts Techniques and Models of Computer Programming The MIT Press David A Watt Programming Language Concepts and Paradigms Prentice Hall David A Watt and Muffy Thomas Programming Language Syntax and Semantics Prentice Hall David A Watt Programming Language Processors Prentice Hall David A Watt Programming Language Design Concepts John Wiley amp Sons External links edit Find more about Programming language at Wikipedia s sister projects Definitions and translations from Wiktionary Media from Commons Quotations from Wikiquote Textbooks from Wikibooks Learning resources from Wikiversity Bottles of Beer A collection of implementations in many languages Computer Programming Languages on the Open Directory Project v t e Types of programming languages Array Aspect oriented Class based Concatenative Concurrent Data structured Dataflow Declarative Domain specific Dynamic Esoteric Event driven Extensible Functional Imperative Logic Macro Metaprogramming Multi paradigm Object based Object oriented Pipeline Procedural Prototype based Reflective Rule based Scripting Synchronous Templating Assembly Compiled Interpreted Machine Low level High level Very high level Non English based Off side rule Visual v t e Programming languages Timeline Assembly BASIC C C C COBOL Fortran Java JavaScript JS Lisp Pascal Perl PHP Python Ruby Smalltalk Visual Basic NET VB NET more Category Comparison Lists Alphabetical Categorical Generational Non English based v t e Types of computer languages Architecture description Hardware description Markup Modeling Programming language Query Specification Stylesheet Template processing Transformation Retrieved from http en wikipedia org w index php title Programming language amp oldid Categories Programming language topics Notation Hidden categories Pages containing cite templates with deprecated parameters All articles with dead external links Articles with dead external links from June Use dmy dates from April All accuracy disputes Articles with disputed statements from March All articles with unsourced statements Articles with unsourced statements from October Articles with unsourced statements from March Articles using fixed number of columns in reflist Articles with Open Directory Project links Navigation menu Personal tools Create account Log in Namespaces Article Talk Variants Views Read Edit View history Actions Search Navigation Main page Contents Featured content Current events Random article Donate to Wikipedia Wikimedia Shop Interaction Help About Wikipedia Community portal Recent changes Contact page Tools What links here Related changes Upload file Special pages Permanent link Page information Data item Cite this page Print export Create a book Download as PDF Printable version Languages Afrikaans Alemannisch Aragon s Asturianu Az rbaycanca B n l m g Boarisch Bosanski Brezhoneg Catal e tina Cymraeg Dansk Deutsch Eesti Espa ol Esperanto Euskara Fran ais Gaeilge Galego Hornjoserbsce Hrvatski Ido Ilokano Bahasa Indonesia Interlingua Interlingue slenska Italiano Latina Latvie u L tzebuergesch Lietuvi Lojban Magyar Bahasa Melayu Mirand s Nederlands Norsk bokm l Norsk nynorsk Occitan O zbekcha Plattd tsch Polski Portugu s Rom n Scots Shqip Simple English Sloven ina Sloven ina srpski Srpskohrvatski Basa Sunda Suomi Svenska Tagalog Taqbaylit tatar a T rk e Ti ng Vi t Winaray Yor b emait ka Edit links This page was last modified on March at Text is available under the Creative Commons Attribution ShareAlike License additional terms may apply By using this site you agree to the Terms of Use and Privacy Policy Wikipedia is a registered trademark of the Wikimedia Foundation Inc a non profit organization Privacy policy About Wikipedia Disclaimers Contact Wikipedia Developers Mobile view if window mw mw loader state site loading user ready user groups ready if window mw mw loader load ext cite mobile desktop mediawiki action view postEdit mediawiki user mediawiki hidpi mediawiki page ready mediawiki searchSuggest ext gadget teahouse ext gadget ReferenceTooltips ext gadget DRN wizard ext gadget charinsert mw MwEmbedSupport style ext wikimediaShopLink core ext navigationTiming schema UniversalLanguageSelector ext uls eventlogger ext uls interlanguage skins vector collapsibleNav null true 