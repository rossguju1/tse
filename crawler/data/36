
http://old-www.cs.dartmouth.edu/~cs50/data/tse/wikipedia/wiki/C_(programming_language).html
1
C programming language Wikipedia the free encyclopedia a lang ar a lang kk arab a lang mzn a lang ps a lang ur text decoration none cache key enwiki resourceloader filter minify css d a aa f a dc f be e if window mw mw config set wgCanonicalNamespace wgCanonicalSpecialPageName false wgNamespaceNumber wgPageName C programming language wgTitle C programming language wgCurRevisionId wgRevisionId wgArticleId wgIsArticle true wgIsRedirect false wgAction view wgUserName null wgUserGroups wgCategories CS errors dates Articles needing additional references from October All articles needing additional references American inventions C programming language family C programming language Cross platform software Low level programming languages Procedural programming languages Programming languages created in Statically typed programming languages Systems programming languages Programming languages with an ISO standard wgBreakFrames false wgPageContentLanguage en wgPageContentModel wikitext wgSeparatorTransformTable wgDigitTransformTable wgDefaultDateFormat dmy wgMonthNames January February March April May June July August September October November December wgMonthNamesShort Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec wgRelevantPageName C programming language wgIsProbablyEditable true wgRestrictionEdit wgRestrictionMove wgWikiEditorEnabledModules toolbar true dialogs true hidesig true templateEditor false templates false preview false previewDialog false publish false toc false wgBetaFeaturesFeatures wgVisualEditor isPageWatched false magnifyClipIconURL bits wikimedia org static wmf skins common images magnify clip png pageLanguageCode en pageLanguageDir ltr svgMaxSize wikilove recipient wikilove anon wgGuidedTourHelpGuiderUrl Help Guided tours guider wgFlowTermsOfUseEdit By saving changes you agree to our u Ca class external text href wikimediafoundation org wiki Terms of use u ETerms of Use u C a u E and agree to irrevocably release your text under the u Ca rel nofollow class external text href creativecommons org licenses by sa u ECC BY SA License u C a u E and u Ca class external text href en wikipedia org wiki Wikipedia Text of the GNU Free Documentation License u EGFDL u C a u E wgULSAcceptLanguageList en us en wgULSCurrentAutonym English wgFlaggedRevsParams tags status levels quality pristine wgStableRevisionId null wgCategoryTreePageCategoryOptions mode hideprefix showcount true namespaces false wgNoticeProject wikipedia wgWikibaseItemId Q if window mw mw loader implement user options function mw user options set ccmeonemails cols date default diffonly disablemail editfont default editondblclick editsectiononrightclick enotifminoredits enotifrevealaddr enotifusertalkpages enotifwatchlistpages extendwatchlist fancysig forceeditsummary gender unknown hideminor hidepatrolled imagesize math minordefault newpageshidepatrolled nickname norollbackdiff numberheadings previewonfirst previewontop rcdays rclimit rememberpassword rows showhiddencats false shownumberswatching showtoolbar skin vector stubthreshold thumbsize underline uselivepreview usenewrc watchcreations watchdefault watchdeletion watchlistdays watchlisthideanons watchlisthidebots watchlisthideliu watchlisthideminor watchlisthideown watchlisthidepatrolled watchmoves wllimit useeditwarning prefershttps flaggedrevssimpleui flaggedrevsstable flaggedrevseditdiffs true flaggedrevsviewdiffs false usebetatoolbar usebetatoolbar cgd visualeditor enable visualeditor enable experimental visualeditor betatempdisable wikilove enabled echo subscriptions web page review true echo subscriptions email page review false ep showtoplink false ep bulkdelorgs false ep bulkdelcourses true ep showdyk true echo subscriptions web education program true echo subscriptions email education program false echo notify show link true echo show alert true echo email frequency echo email format html echo subscriptions email system true echo subscriptions web system true echo subscriptions email other false echo subscriptions web other true echo subscriptions email edit user talk false echo subscriptions web edit user talk true echo subscriptions email reverted false echo subscriptions web reverted true echo subscriptions email article linked false echo subscriptions web article linked false echo subscriptions email mention false echo subscriptions web mention true echo subscriptions web edit thank true echo subscriptions email edit thank false echo subscriptions web flow discussion true echo subscriptions email flow discussion false gettingstarted task toolbar show intro true uls preferences language en variant gan gan variant iu iu variant kk kk variant ku ku variant shi shi variant sr sr variant tg tg variant uz uz variant zh zh searchNs true searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false gadget teahouse gadget ReferenceTooltips gadget DRN wizard gadget charinsert gadget mySandbox variant en mw loader implement user tokens function mw user tokens set editToken patrolToken false watchToken false cache key enwiki resourceloader filter minify js e d ede d d dc cd if window mw mw loader load mediawiki page startup mediawiki legacy wikibits mediawiki legacy ajax ext centralauth centralautologin skins vector compactPersonalBar defaultTracking ext visualEditor viewPageTarget init ext uls init ext uls interface wikibase client init ext centralNotice bannerController skins vector js body behavior url w static wmf skins vector csshover min htc C programming language From Wikipedia the free encyclopedia Jump to navigation search This article is about programming language For other uses see C disambiguation C The C Programming Language often referred to as K amp R the seminal book on C Paradigm s Imperative procedural structured Designed by Dennis Ritchie Developer Dennis Ritchie amp Bell Labs creators ANSI X J ANSI C ISO IEC JTC SC WG ISO C Appeared in Stable release C December Typing discipline Static weak manifest nominal Major implementations GCC Clang Intel C MSVC Pelles C Watcom C Dialects Cyclone Unified Parallel C Split C Cilk C Influenced by B BCPL CPL ALGOL Assembly PL I FORTRAN Influenced Numerous AMPL AWK csh C C C Objective C BitC D Go Rust Java JavaScript Limbo LPC Perl PHP Pike Processing Seed Verilog HDL OS Cross platform multi platform Filename extension s c h C Programming at Wikibooks In computing C s i as in the letter C is a general purpose programming language initially developed by Dennis Ritchie between and at AT amp T Bell Labs Like most imperative languages in the ALGOL tradition C has facilities for structured programming and allows lexical variable scope and recursion while a static type system prevents many unintended operations Its design provides constructs that map efficiently to typical machine instructions and therefore it has found lasting use in applications that had formerly been coded in assembly language most notably system software like the Unix computer operating system C is one of the most widely used programming languages of all time and C compilers are available for the majority of available computer architectures and operating systems Many later languages have borrowed directly or indirectly from C including D Go Rust Java JavaScript Limbo LPC C Objective C Perl PHP Python Verilog hardware description language and Unix s C shell These languages have drawn many of their control structures and other basic features from C Most of them with Python being the most dramatic exception are also very syntactically similar to C in general and they tend to combine the recognizable expression and statement syntax of C with underlying type systems data models and semantics that can be radically different C and Objective C started as compilers that generated C code C is currently nearly a superset of C while Objective C is a strict superset of C Before there was an official standard for C many users and implementors relied on an informal specification contained in a book by Dennis Ritchie and Brian Kernighan that version is generally referred to as K amp R C In the American National Standards Institute published a standard for C generally called ANSI C or C The next year the same specification was approved by the International Organization for Standardization as an international standard generally called C ISO later released an extension to the internationalization support of the standard in and a revised standard known as C in The current version of the standard now known as C was approved in December Contents Design Characteristics History Early developments K amp R C ANSI C and ISO C C C Embedded C Syntax Character set Keywords Operators Hello world example Data types Pointers Arrays Array pointer interchangeability Memory management Libraries Language tools Uses Related languages See also Notes References Further reading External links Design edit C is an imperative procedural language It was designed to be compiled using a relatively straightforward compiler to provide low level access to memory to provide language constructs that map efficiently to machine instructions and to require minimal run time support C was therefore useful for many applications that had formerly been coded in assembly language such as in system programming Despite its low level capabilities the language was designed to encourage cross platform programming A standards compliant and portably written C program can be compiled for a very wide variety of computer platforms and operating systems with few changes to its source code The language has become available on a very wide range of platforms from embedded microcontrollers to supercomputers Characteristics edit Like most imperative languages in the ALGOL tradition C has facilities for structured programming and allows lexical variable scope and recursion while a static type system prevents many unintended operations In C all executable code is contained within subroutines which are called functions although not in the strict sense of functional programming Function parameters are always passed by value Pass by reference is simulated in C by explicitly passing pointer values C program source text is free format using the semicolon as a statement terminator and curly braces for grouping blocks of statements The C language also exhibits the following characteristics There is a small fixed number of keywords including a full set of flow of control primitives for if else while switch and do while There is one namespace and user defined names are not distinguished from keywords by any kind of sigil There are a large number of arithmetical and logical operators such as amp etc More than one assignment may be performed in a single statement Function return values can be ignored when not needed Typing is static but weakly enforced all data has a type but implicit conversions can be performed for instance characters can be used as integers Declaration syntax mimics usage context C has no define keyword instead a statement beginning with the name of a type is taken as a declaration There is no function keyword instead a function is indicated by the parentheses of an argument list User defined typedef and compound types are possible Heterogeneous aggregate data types struct allow related data elements to be accessed and assigned as a unit Array indexing is a secondary notion defined in terms of pointer arithmetic Unlike structs arrays are not first class objects they cannot be assigned or compared using single built in operators There is no array keyword in use or definition instead square brackets indicate arrays syntactically e g month Enumerated types are possible with the enum keyword They are not tagged and are freely interconvertible with integers Strings are not a separate data type but are conventionally implemented as null terminated arrays of characters Low level access to computer memory is possible by converting machine addresses to typed pointers Procedures subroutines not returning values are a special case of function with an untyped return type void Functions may not be defined within the lexical scope of other functions Function and data pointers permit ad hoc run time polymorphism A preprocessor performs macro definition source code file inclusion and conditional compilation There is a basic form of modularity files can be compiled separately and linked together with control over which functions and data objects are visible to other files via static and extern attributes Complex functionality such as I O string manipulation and mathematical functions are consistently delegated to library routines C does not include some features found in newer more modern high level languages including object orientation and garbage collection History edit Early developments edit Ken Thompson and Dennis Ritchie developers of the C programming language The origin of C is closely tied to the development of the Unix operating system originally implemented in assembly language on a PDP by Ritchie and Thompson incorporating several ideas from colleagues Eventually they decided to port the operating system to a PDP The original PDP version of Unix was developed in assembly language The developers were considering to rewrite the system using the B language However B s inability to take advantage of some of the PDP s features notably byte addressability led to the development of C The initial development of C occurred at AT amp T Bell Labs between and according to Ritchie the most creative period occurred in At that year a great part of Unix was rewritten in C By with the addition of struct types the C language had become powerful enough that most of the Unix kernel was now in C The new language was named C because its features were derived from B which according to Ken Thompson was a stripped down version of the BCPL programming language Unix was one of the first operating system kernels implemented in a language other than assembly Earlier instances include the Multics system written in PL I and MCP Master Control Program for the Burroughs B written in ALGOL in Circa further changes to the language were made by Ritchie and Stephen C Johnson to facilitate portability of the Unix operating system Johnson s Portable C Compiler served as the basis for several implementations of C on new platforms K amp R C edit The cover of the book The C Programming Language In Brian Kernighan and Dennis Ritchie published the first edition of The C Programming Language This book known to C programmers as K amp R served for many years as an informal specification of the language The version of C that it describes is commonly referred to as K amp R C The second edition of the book covers the later ANSI C standard K amp R introduced several language features standard I O library long int data type unsigned int data type compound assignment operators of the form op such as were changed to the form op to remove the semantic ambiguity created by such constructs as i which had been interpreted as i decrement i by instead of the possibly intended i let i be Even after the publication of the C standard for many years K amp R C was still considered the lowest common denominator to which C programmers restricted themselves when maximum portability was desired since many older compilers were still in use and because carefully written K amp R C code can be legal Standard C as well In early versions of C only functions that returned a non int value needed to be declared if used before the function definition a function used without any previous declaration was assumed to return type int if its value was used For example long some function int other function int calling function long test register int test test some function if test gt test else test other function return test The int type specifiers which are commented out could be omitted in K amp R C but are required in later standards Since K amp R function declarations did not include any information about function arguments function parameter type checks were not performed although some compilers would issue a warning message if a local function was called with the wrong number of arguments or if multiple calls to an external function used different numbers or types of arguments Separate tools such as Unix s lint utility were developed that among other things could check for consistency of function use across multiple source files In the years following the publication of K amp R C several unofficial features were added to the language supported by compilers from AT amp T and some other vendors These included void functions i e functions with no return value functions returning struct or union types rather than pointers assignment for struct data types enumerated types The large number of extensions and lack of agreement on a standard library together with the language popularity and the fact that not even the Unix compilers precisely implemented the K amp R specification led to the necessity of standardization ANSI C and ISO C edit Main article ANSI C During the late s and s versions of C were implemented for a wide variety of mainframe computers minicomputers and microcomputers including the IBM PC as its popularity began to increase significantly In the American National Standards Institute ANSI formed a committee X J to establish a standard specification of C X J based the C standard on the Unix implementation however the non portable portion of the Unix C library was handed off to the IEEE working group to become the basis for the POSIX standard In the C standard was ratified as ANSI X Programming Language C This version of the language is often referred to as ANSI C Standard C or sometimes C In the ANSI C standard with formatting changes was adopted by the International Organization for Standardization ISO as ISO IEC which is sometimes called C Therefore the terms C and C refer to the same programming language ANSI like other national standards bodies no longer develops the C standard independently but defers to the international C standard maintained by the working group ISO IEC JTC SC WG National adoption of an update to the international standard typically occurs within a year of ISO publication One of the aims of the C standardization process was to produce a superset of K amp R C incorporating many of the unofficial features subsequently introduced The standards committee also included several additional features such as function prototypes borrowed from C void pointers support for international character sets and locales and preprocessor enhancements Although the syntax for parameter declarations was augmented to include the style used in C the K amp R interface continued to be permitted for compatibility with existing source code C is supported by current C compilers and most C code being written today is based on it Any program written only in Standard C and without any hardware dependent assumptions will run correctly on any platform with a conforming C implementation within its resource limits Without such precautions programs may compile only on a certain platform or with a particular compiler due for example to the use of non standard libraries such as GUI libraries or to a reliance on compiler or platform specific attributes such as the exact size of data types and byte endianness In cases where code must be compilable by either standard conforming or K amp R C based compilers the STDC macro can be used to split the code into Standard and K amp R sections to prevent the use on a K amp R C based compiler of features available only in Standard C After the ANSI ISO standardization process the C language specification remained relatively static for several years In Normative Amendment to the C standard ISO IEC AMD known informally as C was published to correct some details and to add more extensive support for international character sets C edit Main article C The C standard was further revised in the late s leading to the publication of ISO IEC in which is commonly referred to as C It has since been amended three times by Technical Corrigenda C introduced several new features including inline functions several new data types including long long int and a complex type to represent complex numbers variable length arrays improved support for IEEE floating point support for variadic macros macros of variable arity and support for one line comments beginning with as in BCPL or C Many of these had already been implemented as extensions in several C compilers C is for the most part backward compatible with C but is stricter in some ways in particular a declaration that lacks a type specifier no longer has int implicitly assumed A standard macro STDC VERSION is defined with value L to indicate that C support is available GCC Solaris Studio and other C compilers now support many or all of the new features of C The C compiler in Microsoft Visual C however implements the C standard and those parts of C that are required for compatibility with C C edit Main article C C standard revision In work began on another revision of the C standard informally called C X until its official publication on The C standards committee adopted guidelines to limit the adoption of new features that had not been tested by existing implementations The C standard adds numerous new features to C and the library including type generic macros anonymous structures improved Unicode support atomic operations multi threading and bounds checked functions It also makes some portions of the existing C library optional and improves compatibility with C Embedded C edit Main article Embedded C Historically embedded C programming requires nonstandard extensions to the C language in order to support exotic features such as fixed point arithmetic multiple distinct memory banks and basic I O operations In the C Standards Committee published a technical report extending the C language to address these issues by providing a common standard for all implementations to adhere to It includes a number of features not available in normal C such as fixed point arithmetic named address spaces and basic I O hardware addressing Syntax edit Main article C syntax C has a formal grammar specified by the C standard Unlike languages such as FORTRAN C source code is free form which allows arbitrary use of whitespace to format code rather than column based or text line based restrictions Comments may appear either between the delimiters and or since C following until the end of the line Comments delimited by and do not nest and these sequences of characters are not interpreted as comment delimiters if they appear inside string or character literals C source files contain declarations and function definitions Function definitions in turn contain declarations and statements Declarations either define new types using keywords such as struct union and enum or assign types to and perhaps reserve storage for new variables usually by writing the type followed by the variable name Keywords such as char and int specify built in types Sections of code are enclosed in braces and sometimes called curly brackets to limit the scope of declarations and to act as a single statement for control structures As an imperative language C uses statements to specify actions The most common statement is an expression statement consisting of an expression to be evaluated followed by a semicolon as a side effect of the evaluation functions may be called and variables may be assigned new values To modify the normal sequential execution of statements C provides several control flow statements identified by reserved keywords Structured programming is supported by if else conditional execution and by do while while and for iterative execution looping The for statement has separate initialization testing and reinitialization expressions any or all of which can be omitted break and continue can be used to leave the innermost enclosing loop statement or skip to its reinitialization There is also a non structured goto statement which branches directly to the designated label within the function switch selects a case to be executed based on the value of an integer expression Expressions can use a variety of built in operators and may contain function calls The order in which arguments to functions and operands to most operators are evaluated is unspecified The evaluations may even be interleaved However all side effects including storage to variables will occur before the next sequence point sequence points include the end of each expression statement and the entry to and return from each function call Sequence points also occur during evaluation of expressions containing certain operators amp amp and the comma operator This permits a high degree of object code optimization by the compiler but requires C programmers to take more care to obtain reliable results than is needed for other programming languages Kernighan and Ritchie say in the Introduction of The C Programming Language C like any other language has its blemishes Some of the operators have the wrong precedence some parts of the syntax could be better The C standard did not attempt to correct many of these blemishes because of the impact of such changes on already existing software Character set edit The basic C source character set includes the following characters Lowercase and uppercase letters a z A Z Decimal digits Graphic characters amp lt gt Whitespace characters space horizontal tab vertical tab form feed newline Newline indicates the end of a text line it need not correspond to an actual single character although for convenience C treats it as one Additional multibyte encoded characters may be used but are not portable The latest C standard C allows multinational Unicode characters to be embedded portably within C source text by using a u DDDD encoding where DDDD denotes a Unicode character code although this feature is not yet widely implemented The basic C execution character set contains the same characters along with representations for alert backspace and carriage return Run time support for extended character sets has increased with each revision of the C standard Keywords edit C has keywords reserved words with special meaning auto break case char const continue default do double else enum extern float for goto if int long register return short signed sizeof static struct switch typedef union unsigned void volatile while C adds five more keywords Bool Complex Imaginary inline restrict C adds seven more keywords Alignas Alignof Atomic Generic Noreturn Static assert Thread local Most of the recently added keywords begin with an underscore followed by a capital letter because identifiers of that form were previously reserved by the C standard for use only by implementations Since existing program source code should not have been using these identifiers it would not be affected when C implementations started supporting these extensions to the programming language Some standard headers do define more convenient synonyms for underscored identifiers The language previously included a reserved keyword called entry but this was never implemented and has now been removed as a reserved word Operators edit Main article Operators in C and C C supports a rich set of operators which are symbols used within an expression to specify the manipulations to be performed while evaluating that expression C has operators for arithmetic assignment augmented assignment amp lt lt gt gt bitwise logic amp bitwise shifts lt lt gt gt boolean logic amp amp conditional evaluation equality testing calling functions increment and decrement member selection gt object size sizeof order relations lt lt gt gt reference and dereference amp sequencing subexpression grouping type conversion typename C uses the operator reserved in mathematics to express equality to indicate assignment following the precedent of Fortran and PL I but unlike ALGOL and its derivatives The similarity between C s operator for assignment and that for equality has been criticised as it makes it easy to accidentally substitute one for the other In many cases each may be used in the context of the other without a compilation error although some compilers produce warnings For example the conditional expression in if a b is true if a is not zero after the assignment Additionally C s operator precedence is non intuitive such as binding more tightly than amp and in expressions like x amp which would need to be written x amp to be properly evaluated Hello world example edit The hello world example which appeared in the first edition of K amp R has become the model for an introductory program in most programming textbooks regardless of programming language The program prints hello world to the standard output which is usually a terminal or screen display The original version was main printf hello world n A standard conforming hello world program is a include lt stdio h gt int main void printf hello world n The first line of the program contains a preprocessing directive indicated by include This causes the compiler to replace that line with the entire text of the stdio h standard header which contains declarations for standard input and output functions such as printf The angle brackets surrounding stdio h indicate that stdio h is located using a search strategy that prefers headers in the compiler s include path to other headers having the same name double quotes are used to include local or project specific header files discuss The next line indicates that a function named main is being defined The main function serves a special purpose in C programs the run time environment calls the main function to begin program execution The type specifier int indicates that the value that is returned to the invoker in this case the run time environment as a result of evaluating the main function is an integer The keyword void as a parameter list indicates that this function takes no arguments b The opening curly brace indicates the beginning of the definition of the main function The next line calls diverts execution to a function named printf which is supplied from a system library In this call the printf function is passed provided with a single argument the address of the first character in the string literal hello world n The string literal is an unnamed array with elements of type char set up automatically by the compiler with a final valued character to mark the end of the array printf needs to know this The n is an escape sequence that C translates to a newline character which on output signifies the end of the current line The return value of the printf function is of type int but it is silently discarded since it is not used A more careful program might test the return value to determine whether or not the printf function succeeded The semicolon terminates the statement The closing curly brace indicates the end of the code for the main function According to the C specification and newer main function will implicitly return a status of upon reaching the that terminates the function This is interpreted by the run time system as an exit code indicating successful execution Data types edit This section needs additional citations for verification Please help improve this article by adding citations to reliable sources Unsourced material may be challenged and removed October Main article C variable types and declarations C has a static weak typing type system that shares some similarities with that of other ALGOL descendants such as Pascal There are built in types for integers of various sizes both signed and unsigned floating point numbers characters and enumerated types enum C added a boolean datatype There are also derived types including arrays pointers records struct and untagged unions union C is often used in low level systems programming where escapes from the type system may be necessary The compiler attempts to ensure type correctness of most expressions but the programmer can override the checks in various ways either by using a type cast to explicitly convert a value from one type to another or by using pointers or unions to reinterpret the underlying bits of a data object in some other way Some find C s declaration syntax unintuitive particularly for function pointers Ritchie s idea was to declare identifiers in contexts resembling their use declaration reflects use C s usual arithmetic conversions allow for efficient code to be generated but can sometimes produce unexpected results For example a comparison of signed and unsigned integers of equal width requires a conversion of the signed value to unsigned This can generate unexpected results if the signed value is negative Pointers edit C supports the use of pointers a type of reference that records the address or location of an object or function in memory Pointers can be dereferenced to access data stored at the address pointed to or to invoke a pointed to function Pointers can be manipulated using assignment or pointer arithmetic The run time representation of a pointer value is typically a raw memory address perhaps augmented by an offset within word field but since a pointer s type includes the type of the thing pointed to expressions including pointers can be type checked at compile time Pointer arithmetic is automatically scaled by the size of the pointed to data type Pointers are used for many different purposes in C Text strings are commonly manipulated using pointers into arrays of characters Dynamic memory allocation is performed using pointers Many data types such as trees are commonly implemented as dynamically allocated struct objects linked together using pointers Pointers to functions are useful for passing functions as arguments to higher order functions such as qsort or bsearch or as callbacks to be invoked by event handlers A null pointer value explicitly points to no valid location Dereferencing a null pointer value is undefined often resulting in a segmentation fault Null pointer values are useful for indicating special cases such as no next pointer in the final node of a linked list or as an error indication from functions returning pointers In appropriate contexts in source code such as for assigning to a pointer variable a null pointer constant can be written as with or without explicit casting to a pointer type or as the NULL macro defined by several standard headers In conditional contexts null pointer values evaluate to false while all other pointer values evaluate to true Void pointers void point to objects of unspecified type and can therefore be used as generic data pointers Since the size and type of the pointed to object is not known void pointers cannot be dereferenced nor is pointer arithmetic on them allowed although they can easily be and in many contexts implicitly are converted to and from any other object pointer type Careless use of pointers is potentially dangerous Because they are typically unchecked a pointer variable can be made to point to any arbitrary location which can cause undesirable effects Although properly used pointers point to safe places they can be made to point to unsafe places by using invalid pointer arithmetic the objects they point to may be deallocated and reused dangling pointers they may be used without having been initialized wild pointers or they may be directly assigned an unsafe value using a cast union or through another corrupt pointer In general C is permissive in allowing manipulation of and conversion between pointer types although compilers typically provide options for various levels of checking Some other programming languages address these problems by using more restrictive reference types Arrays edit Array types in C are traditionally of a fixed static size specified at compile time The more recent C standard also allows a form of variable length arrays However it is also possible to allocate a block of memory of arbitrary size at run time using the standard library s malloc function and treat it as an array C s unification of arrays and pointers means that declared arrays and these dynamically allocated simulated arrays are virtually interchangeable Since arrays are always accessed in effect via pointers array accesses are typically not checked against the underlying array size although some compilers may provide bounds checking as an option Array bounds violations are therefore possible and rather common in carelessly written code and can lead to various repercussions including illegal memory accesses corruption of data buffer overruns and run time exceptions If bounds checking is desired it must be done manually C does not have a special provision for declaring multidimensional arrays but rather relies on recursion within the type system to declare arrays of arrays which effectively accomplishes the same thing The index values of the resulting multidimensional array can be thought of as increasing in row major order Multidimensional arrays are commonly used in numerical algorithms mainly from applied linear algebra to store matrices The structure of the C array is well suited to this particular task However since arrays are passed merely as pointers the bounds of the array must be known fixed values or else explicitly passed to any subroutine that requires them and dynamically sized arrays of arrays cannot be accessed using double indexing A workaround for this is to allocate the array with an additional row vector of pointers to the columns C introduced variable length arrays which address some but not all of the issues with ordinary C arrays See also C string Array pointer interchangeability edit The subscript notation x i where x designates a pointer is a syntactic sugar for x i Taking advantage of the compiler s knowledge of the pointer type the address that x i points to is not the base address pointed to by x incremented by i bytes but rather is defined to be the base address incremented by i multiplied by the size of an element that x points to Thus x i designates the i th element of the array Furthermore in most expression contexts a notable exception is as operand of sizeof the name of an array is automatically converted to a pointer to the array s first element This implies that an array is never copied as a whole when named as an argument to a function but rather only the address of its first element is passed Therefore although function calls in C use pass by value semantics arrays are in effect passed by reference The size of an element can be determined by applying the operator sizeof to any dereferenced element of x as in n sizeof x or n sizeof x and the number of elements in a declared array A can be determined as sizeof A sizeof A The latter only applies to array names variables declared with subscripts int A Due to the semantics of C it is not possible to determine the entire size of arrays through pointers to arrays or those created by dynamic allocation malloc code such as sizeof arr sizeof arr where arr A designates a pointer will not work since the compiler assumes the size of the pointer itself is being requested Since array name arguments to sizeof are not converted to pointers they do not exhibit such ambiguity However arrays created by dynamic allocation are initialized to pointers rather than true array variables so they suffer from the same sizeof issues as array pointers Thus despite this apparent equivalence between array and pointer variables there is still a distinction to be made between them Even though the name of an array is in most expression contexts converted into a pointer to its first element this pointer does not itself occupy any storage the array name is not an l value and its address is a constant unlike a pointer variable Consequently what an array points to cannot be changed and it is impossible to assign a new address to an array name Array contents may be copied however by using the memcpy function or by accessing the individual elements Memory management edit One of the most important functions of a programming language is to provide facilities for managing memory and the objects that are stored in memory C provides three distinct ways to allocate memory for objects Static memory allocation space for the object is provided in the binary at compile time these objects have an extent or lifetime as long as the binary which contains them is loaded into memory Automatic memory allocation temporary objects can be stored on the stack and this space is automatically freed and reusable after the block in which they are declared is exited Dynamic memory allocation blocks of memory of arbitrary size can be requested at run time using library functions such as malloc from a region of memory called the heap these blocks persist until subsequently freed for reuse by calling the library function realloc or free These three approaches are appropriate in different situations and have various tradeoffs For example static memory allocation has little allocation overhead automatic allocation may involve slightly more overhead and dynamic memory allocation can potentially have a great deal of overhead for both allocation and deallocation The persistent nature of static objects is useful for maintaining state information across function calls automatic allocation is easy to use but stack space is typically much more limited and transient than either static memory or heap space and dynamic memory allocation allows convenient allocation of objects whose size is known only at run time Most C programs make extensive use of all three Where possible automatic or static allocation is usually simplest because the storage is managed by the compiler freeing the programmer of the potentially error prone chore of manually allocating and releasing storage However many data structures can change in size at runtime and since static allocations and automatic allocations before C must have a fixed size at compile time there are many situations in which dynamic allocation is necessary Prior to the C standard variable sized arrays were a common example of this See the article on malloc for an example of dynamically allocated arrays Unlike automatic allocation which can fail at run time with uncontrolled consequences the dynamic allocation functions return an indication in the form of a null pointer value when the required storage cannot be allocated Static allocation that is too large is usually detected by the linker or loader before the program can even begin execution Unless otherwise specified static objects contain zero or null pointer values upon program startup Automatically and dynamically allocated objects are initialized only if an initial value is explicitly specified otherwise they initially have indeterminate values typically whatever bit pattern happens to be present in the storage which might not even represent a valid value for that type If the program attempts to access an uninitialized value the results are undefined Many modern compilers try to detect and warn about this problem but both false positives and false negatives can occur Another issue is that heap memory allocation has to be synchronized with its actual usage in any program in order for it to be reused as much as possible For example if the only pointer to a heap memory allocation goes out of scope or has its value overwritten before free is called then that memory cannot be recovered for later reuse and is essentially lost to the program a phenomenon known as a memory leak Conversely it is possible for memory to be freed but continue to be referenced leading to unpredictable results Typically the symptoms will appear in a portion of the program far removed from the actual error making it difficult to track down the problem Such issues are ameliorated in languages with automatic garbage collection Libraries edit The C programming language uses libraries as its primary method of extension In C a library is a set of functions contained within a single archive file Each library typically has a header file which contains the prototypes of the functions contained within the library that may be used by a program and declarations of special data types and macro symbols used with these functions In order for a program to use a library it must include the library s header file and the library must be linked with the program which in many cases requires compiler flags e g lm shorthand for math library The most common C library is the C standard library which is specified by the ISO and ANSI C standards and comes with every C implementation Implementations which target limited environments such as embedded systems may provide only a subset of the standard library This library supports stream input and output memory allocation mathematics character strings and time values Several separate standard headers for example stdio h specify the interfaces for these and other standard library facilities Another common set of C library functions are those used by applications specifically targeted for Unix and Unix like systems especially functions which provide an interface to the kernel These functions are detailed in various standards such as POSIX and the Single UNIX Specification Since many programs have been written in C there are a wide variety of other libraries available Libraries are often written in C because C compilers generate efficient object code programmers then create interfaces to the library so that the routines can be used from higher level languages like Java Perl and Python Language tools edit This section does not cite any references or sources Please help improve this section by adding citations to reliable sources Unsourced material may be challenged and removed October Tools have been created to help C programmers avoid some of the problems inherent in the language such as statements with undefined behavior or statements that are not a good practice because they are likely to result in unintended behavior or run time errors Automated source code checking and auditing are beneficial in any language and for C many such tools exist such as Lint A common practice is to use Lint to detect questionable code when a program is first written Once a program passes Lint it is then compiled using the C compiler Also many compilers can optionally warn about syntactically valid constructs that are likely to actually be errors MISRA C is a proprietary set of guidelines to avoid such questionable code developed for embedded systems There are also compilers libraries and operating system level mechanisms for performing actions that are not a standard part of C such as array bounds checking buffer overflow detection serialization and automatic garbage collection Tools such as Purify or Valgrind and linking with libraries containing special versions of the memory allocation functions can help uncover runtime errors in memory usage Uses edit This section needs additional citations for verification Please help improve this article by adding citations to reliable sources Unsourced material may be challenged and removed October C is often used for system programming including implementing operating systems and embedded system applications due to a combination of desirable characteristics such as code portability and efficiency ability to access specific hardware addresses ability to pun types to match externally imposed data access requirements and low run time demand on system resources C can also be used for website programming using CGI as a gateway for information between the Web application the server and the browser Some reasons for choosing C over interpreted languages are its speed stability and near universal availability One consequence of C s wide availability and efficiency is that compilers libraries and interpreters of other programming languages are often implemented in C The primary implementations of Python CPython Perl and PHP are all written in C Due to its thin layer of abstraction and low overhead C allows efficient implementations of algorithms and data structures which is useful for programs that perform a lot of computations For example the GNU Multi Precision Library the GNU Scientific Library Mathematica and MATLAB are completely or partially written in C C is sometimes used as an intermediate language by implementations of other languages sometimes referred to as C intermediate language CIL This approach may be used for portability or convenience by using C as an intermediate language it is not necessary to develop machine specific code generators C has some features such as line number preprocessor directives and optional superfluous commas at the end of initializer lists which support compilation of generated code However some of C s shortcomings have prompted the development of other C based languages specifically designed for use as intermediate languages such as C Several other tools use CIL as a way to have access to a C abstract syntax tree Some of these utilities are Frama c a framework for analysis of C programs or Compcert a C compiler proven in coq CIL was originally designed and implemented in by George Necula et al C has also been widely used to implement end user applications but much of that development has shifted to newer languages Related languages edit This section does not cite any references or sources Please help improve this section by adding citations to reliable sources Unsourced material may be challenged and removed October C has directly or indirectly influenced many later languages such as C D Go Java JavaScript Limbo LPC Perl PHP Python and Unix s C Shell The most pervasive influence has been syntactical all of the languages mentioned combine the statement and more or less recognizably expression syntax of C with type systems data models and or large scale program structures that differ from those of C sometimes radically Several C or near C interpreters exist including Ch and CINT which can also be used for scripting When object oriented languages became popular C and Objective C were two different extensions of C that provided object oriented capabilities Both languages were originally implemented as source to source compilers source code was translated into C and then compiled with a C compiler The C programming language was devised by Bjarne Stroustrup as one approach to providing object oriented functionality with C like syntax C adds greater typing strength scoping and other tools useful in object oriented programming and permits generic programming via templates Nearly a superset of C C now supports most of C with a few exceptions see Compatibility of C and C Objective C was originally a very thin layer on top of C and remains a strict superset of C that permits object oriented programming using a hybrid dynamic static typing paradigm Objective C derives its syntax from both C and Smalltalk syntax that involves preprocessing expressions function declarations and function calls is inherited from C while the syntax for object oriented features was originally taken from Smalltalk In addition to C and Objective C Ch Cilk and Unified Parallel C are nearly supersets of C See also edit Comparison of Pascal and C Comparison of programming languages International Obfuscated C Code Contest List of C based programming languages List of C compilers Computer programming portal Information technology portal Notes edit The original example code will compile on most modern compilers that are not in strict standard compliance mode but it does not fully conform to the requirements of either C or C In fact C requires that a diagnostic message be produced The main function actually has two arguments int argc and char argv respectively which can be used to handle command line arguments The ISO C standard section requires both forms of main to be supported which is special treatment not afforded to any other function References edit a b c d Kernighan Brian W Ritchie Dennis M February The C Programming Language st ed Englewood Cliffs NJ Prentice Hall ISBN Regarded by many to be the authoritative reference on C Ritchie Dennis M January The Development of the C Language Retrieved January Thompson had made a brief attempt to produce a system coded in an early version of C before structures in but gave up the effort a b Ritchie Dennis M January The Development of the C Language Retrieved January The scheme of type composition adopted by C owes considerable debt to Algol although it did not perhaps emerge in a form that Algol s adherents would approve of a b Verilog HDL and C The Research School of Computer Science at the Australian National University Retrieved s Verilog first introduced Verilog inspired by the C programming language Dennis M Ritchie The History of the C Programming Language Retrieved February Giannini Mario Code Fighter Inc Columbia University C C In Hossein Bidgoli The Internet encyclopedia John Wiley and Sons p ISBN Retrieved December Lawlis Patricia K August Guidelines for Choosing a Computer Language Support for the Visionary Organization Ada Information Clearinghouse Retrieved July Programming Language Popularity Retrieved January TIOBE Programming Community Index Retrieved May Stroustrup Bjarne A History of C Retrieved June Write Objective C Code apple com Retrieved WG N Committee Draft April Stallings William Operating Systems Internals and Design Principles th ed page Pearson Education Inc A Brief History of C Johnson S C Ritchie D M Portability of C Programs and the UNIX System Bell System Tech J doi j tb x Retrieved December a b Kernighan Brian W Ritchie Dennis M March The C Programming Language nd ed Englewood Cliffs NJ Prentice Hall ISBN JTC SC WG C Home page ISO IEC Retrieved June Andrew Binstock October Interview with Herb Sutter Dr Dobbs Retrieved September TR Embedded C ISO IEC Retrieved July Harbison Samuel P Steele Guy L C A Reference Manual th ed Englewood Cliffs NJ Prentice Hall ISBN X Contains a BNF grammar for C Kernighan Brian W Ritchie Dennis M The C Programming Language nd ed Prentice Hall p ISBN X Page of the original K amp R ISO IEC x ISO C Committee Draft Kernighan Brian W Ritchie Dennis M The C Programming Language nd ed Prentice Hall pp ISBN X Common Programming Mistakes in C Cs ucr edu Retrieved June Schultz Thomas C and the rd ed Otsego MI PageFree Publishing Inc p ISBN X Retrieved February Page of the original K amp R a b c d e f g Klemens Ben st Century C O Reilly Media ISBN Page of K amp R For example gcc provides FORTIFY SOURCE Security Features Compile Time Buffer Checks FORTIFY SOURCE fedoraproject org Retrieved Raymond Eric S October The New Hacker s Dictionary rd ed MIT Press p ISBN Retrieved August Summit Steve comp lang c Frequently Asked Questions Retrieved March Summit Steve comp lang c Frequently Asked Questions Retrieved March Dr Dobb s Sourcebook U S A Miller Freeman Inc November December Check date values in date help Using C for CGI Programming linuxjournal com March Retrieved January George C Necula Scott McPeak S P Rahul and Westley Weimer CIL Intermediate Language and Tools for Analysis and Transformation of C Programs PDF cs berkeley edu University of California Berkeley Retrieved Gabriel Kerneis CIL C Intermediate Language github io Retrieved Further reading edit Banahan M Brady D Doran M The C Book nd ed Addison Wesley King K N April C Programming A Modern Approach nd ed Norton ISBN Ritchie Dennis M The Development of the C Language The second ACM SIGPLAN History of Programming Languages Conference HOPL II ACM doi ISBN Thompson Ken A New C Compiler Murray Hill New Jersey AT amp T Bell Laboratories Feuer Alan R The C Puzzle Book st revised printing ed Addison Wesley ISBN External links edit Find more about C programming language at Wikipedia s sister projects Media from Commons Quotations from Wikiquote Textbooks from Wikibooks Learning resources from Wikiversity ISO C Working Group official website comp lang c Frequently Asked Questions ISO IEC Official C documents ANSI C Standard ANSI X J Published May Third Public Review ANSI C Rationale ANSI X J Published November C with Technical corrigenda TC TC and TC included PDF MB A History of C by Dennis Richie v t e Integrated development environments for C and C Open source Anjuta Code Blocks CodeLite Dev C Eclipse Geany GNAT Programming Studio KDevelop Kuzya MonoDevelop NetBeans QDevelop Qt Creator Ultimate wxDev C Freeware Pelles C Oracle Solaris Studio previously called Sun Studio Visual Studio Express Xcode Retail C Builder CodeWarrior IBM VisualAge Visual Studio Category Comparison v t e C programming language ANSI C C and C C C Compilers Amsterdam Compiler Kit Borland Turbo C Clang GCC LCC Pelles C PCC TCC Visual C C CLI C CX Watcom C C compiler Libraries C standard library Bionic dietlibc EGLIBC glibc klibc libhybris musl Newlib uClibc BSD libc Features String Syntax Preprocessor Variable types and declarations Functions Select descendants C C D Objective C Alef Limbo Go Vala C and other languages C and C Compatibility Operators Comparison of Pascal and C C to Java byte code compiler Category v t e Programming languages Timeline Assembly BASIC C C C COBOL Fortran Java JavaScript JS Lisp Pascal Perl PHP Python Ruby Smalltalk Visual Basic NET VB NET more Category Comparison Lists Alphabetical Categorical Generational Non English based Retrieved from http en wikipedia org w index php title C programming language amp oldid Categories American inventions C programming language family C programming language Cross platform software Low level programming languages Procedural programming languages Programming languages created in Statically typed programming languages Systems programming languages Programming languages with an ISO standard Hidden categories CS errors dates Articles needing additional references from October All articles needing additional references Navigation menu Personal tools Create account Log in Namespaces Article Talk Variants Views Read Edit View history Actions Search Navigation Main page Contents Featured content Current events Random article Donate to Wikipedia Wikimedia Shop Interaction Help About Wikipedia Community portal Recent changes Contact page Tools What links here Related changes Upload file Special pages Permanent link Page information Data item Cite this page Print export Create a book Download as PDF Printable version Languages Afrikaans Alemannisch Aragon s Asturianu Az rbaycanca B n l m g Bosanski Brezhoneg Catal e tina Corsu Cymraeg Dansk Deutsch Eesti Espa ol Esperanto Euskara Fran ais Gaeilge Galego Hrvatski Bahasa Indonesia Interlingua slenska Italiano Basa Jawa Kurd Latina Latvie u Lietuvi Magyar Malagasy Bahasa Melayu M ng d ng ng Nederlands Norsk bokm l Norsk nynorsk Occitan Polski Portugu s Rom n Scots Shqip Simple English Sloven ina Sloven ina srpski Srpskohrvatski Suomi Svenska Tagalog Taqbaylit tatar a T rk e Ti ng Vi t Winaray emait ka Edit links This page was last modified on March at Text is available under the Creative Commons Attribution ShareAlike License additional terms may apply By using this site you agree to the Terms of Use and Privacy Policy Wikipedia is a registered trademark of the Wikimedia Foundation Inc a non profit organization Privacy policy About Wikipedia Disclaimers Contact Wikipedia Developers Mobile view if window mw mw loader state site loading user ready user groups ready if window mw mw loader load ext cite mobile desktop mediawiki action view postEdit mediawiki user mediawiki hidpi mediawiki page ready mediawiki searchSuggest ext gadget teahouse ext gadget ReferenceTooltips ext gadget DRN wizard ext gadget charinsert mw MwEmbedSupport style ext navigationTiming schema UniversalLanguageSelector ext uls eventlogger ext uls interlanguage skins vector collapsibleNav null true 