
http://old-www.cs.dartmouth.edu/~cs50/data/tse/wikipedia/wiki/Hash_table.html
1
Hash table Wikipedia the free encyclopedia a lang ar a lang kk arab a lang mzn a lang ps a lang ur text decoration none cache key enwiki resourceloader filter minify css d a aa f a dc f be e if window mw mw config set wgCanonicalNamespace wgCanonicalSpecialPageName false wgNamespaceNumber wgPageName Hash table wgTitle Hash table wgCurRevisionId wgRevisionId wgArticleId wgIsArticle true wgIsRedirect false wgAction view wgUserName null wgUserGroups wgCategories Pages containing cite templates with deprecated parameters Use mdy dates from January All articles with unsourced statements Articles with unsourced statements from January Articles with unsourced statements from April Articles with unsourced statements from March Articles needing additional references from July All articles needing additional references Commons category with local link same as on Wikidata Articles with example C code Hashing Search algorithms Data structures wgBreakFrames false wgPageContentLanguage en wgPageContentModel wikitext wgSeparatorTransformTable wgDigitTransformTable wgDefaultDateFormat dmy wgMonthNames January February March April May June July August September October November December wgMonthNamesShort Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec wgRelevantPageName Hash table wgIsProbablyEditable true wgRestrictionEdit wgRestrictionMove wgWikiEditorEnabledModules toolbar true dialogs true hidesig true templateEditor false templates false preview false previewDialog false publish false toc false wgBetaFeaturesFeatures wgVisualEditor isPageWatched false magnifyClipIconURL bits wikimedia org static wmf skins common images magnify clip png pageLanguageCode en pageLanguageDir ltr svgMaxSize wikilove recipient wikilove anon wgGuidedTourHelpGuiderUrl Help Guided tours guider wgFlowTermsOfUseEdit By saving changes you agree to our u Ca class external text href wikimediafoundation org wiki Terms of use u ETerms of Use u C a u E and agree to irrevocably release your text under the u Ca rel nofollow class external text href creativecommons org licenses by sa u ECC BY SA License u C a u E and u Ca class external text href en wikipedia org wiki Wikipedia Text of the GNU Free Documentation License u EGFDL u C a u E wgULSAcceptLanguageList es mx wgULSCurrentAutonym English wgFlaggedRevsParams tags status levels quality pristine wgStableRevisionId null wgCategoryTreePageCategoryOptions mode hideprefix showcount true namespaces false wgNoticeProject wikipedia wgWikibaseItemId Q if window mw mw loader implement user options function mw user options set ccmeonemails cols date default diffonly disablemail editfont default editondblclick editsectiononrightclick enotifminoredits enotifrevealaddr enotifusertalkpages enotifwatchlistpages extendwatchlist fancysig forceeditsummary gender unknown hideminor hidepatrolled imagesize math minordefault newpageshidepatrolled nickname norollbackdiff numberheadings previewonfirst previewontop rcdays rclimit rememberpassword rows showhiddencats false shownumberswatching showtoolbar skin vector stubthreshold thumbsize underline uselivepreview usenewrc watchcreations watchdefault watchdeletion watchlistdays watchlisthideanons watchlisthidebots watchlisthideliu watchlisthideminor watchlisthideown watchlisthidepatrolled watchmoves wllimit useeditwarning prefershttps flaggedrevssimpleui flaggedrevsstable flaggedrevseditdiffs true flaggedrevsviewdiffs false usebetatoolbar usebetatoolbar cgd visualeditor enable visualeditor enable experimental visualeditor betatempdisable wikilove enabled echo subscriptions web page review true echo subscriptions email page review false ep showtoplink false ep bulkdelorgs false ep bulkdelcourses true ep showdyk true echo subscriptions web education program true echo subscriptions email education program false echo notify show link true echo show alert true echo email frequency echo email format html echo subscriptions email system true echo subscriptions web system true echo subscriptions email other false echo subscriptions web other true echo subscriptions email edit user talk false echo subscriptions web edit user talk true echo subscriptions email reverted false echo subscriptions web reverted true echo subscriptions email article linked false echo subscriptions web article linked false echo subscriptions email mention false echo subscriptions web mention true echo subscriptions web edit thank true echo subscriptions email edit thank false echo subscriptions web flow discussion true echo subscriptions email flow discussion false gettingstarted task toolbar show intro true uls preferences language en variant gan gan variant iu iu variant kk kk variant ku ku variant shi shi variant sr sr variant tg tg variant uz uz variant zh zh searchNs true searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false gadget teahouse gadget ReferenceTooltips gadget DRN wizard gadget charinsert gadget mySandbox variant en mw loader implement user tokens function mw user tokens set editToken patrolToken false watchToken false cache key enwiki resourceloader filter minify js e d ede d d dc cd if window mw mw loader load mediawiki page startup mediawiki legacy wikibits mediawiki legacy ajax ext centralauth centralautologin skins vector compactPersonalBar defaultTracking ext visualEditor viewPageTarget init ext uls init ext uls interface wikibase client init ext centralNotice bannerController skins vector js body behavior url w static wmf skins vector csshover min htc Hash table From Wikipedia the free encyclopedia Jump to navigation search Not to be confused with Hash list or Hash tree Hash table Type Unordered associative array Invented Time complexity in big O notation Average Worst case Space O n O n Search O O n Insert O O n Delete O O n A small phone book as a hash table In computing a hash table also hash map is a data structure used to implement an associative array a structure that can map keys to values A hash table uses a hash function to compute an index into an array of buckets or slots from which the correct value can be found Ideally the hash function will assign each key to a unique bucket but this situation is rarely achievable in practice usually some keys will hash to the same bucket Instead most hash table designs assume that hash collisions different keys that are assigned by the hash function to the same bucket will occur and must be accommodated in some way In a well dimensioned hash table the average cost number of instructions for each lookup is independent of the number of elements stored in the table Many hash table designs also allow arbitrary insertions and deletions of key value pairs at amortized constant average cost per operation In many situations hash tables turn out to be more efficient than search trees or any other table lookup structure For this reason they are widely used in many kinds of computer software particularly for associative arrays database indexing caches and sets Contents Hashing Choosing a good hash function Perfect hash function Key statistics Collision resolution Separate chaining Separate chaining with linked lists Separate chaining with list head cells Separate chaining with other structures Open addressing Coalesced hashing Cuckoo hashing Robin Hood hashing choice hashing Hopscotch hashing Dynamic resizing Resizing by copying all entries Incremental resizing Monotonic keys Other solutions Performance analysis Features Advantages Drawbacks Uses Associative arrays Database indexing Caches Sets Object representation Unique data representation String interning Implementations In programming languages Independent packages History See also Related data structures References Further reading External links Hashing edit Main article Hash function The idea of hashing is to distribute the entries key value pairs across an array of buckets Given a key the algorithm computes an index that suggests where the entry can be found index f key array size Often this is done in two steps hash hashfunc key index hash array size In this method the hash is independent of the array size and it is then reduced to an index a number between and array size using the modulus operator In the case that the array size is a power of two the remainder operation is reduced to masking which improves speed but can increase problems with a poor hash function Choosing a good hash function edit A good hash function and implementation algorithm are essential for good hash table performance but may be difficult to achieve A basic requirement is that the function should provide a uniform distribution of hash values A non uniform distribution increases the number of collisions and the cost of resolving them Uniformity is sometimes difficult to ensure by design but may be evaluated empirically using statistical tests e g a Pearson s chi squared test for discrete uniform distributions The distribution needs to be uniform only for table sizes that occur in the application In particular if one uses dynamic resizing with exact doubling and halving of the table size s then the hash function needs to be uniform only when s is a power of two On the other hand some hashing algorithms provide uniform hashes only when s is a prime number For open addressing schemes the hash function should also avoid clustering the mapping of two or more keys to consecutive slots Such clustering may cause the lookup cost to skyrocket even if the load factor is low and collisions are infrequent The popular multiplicative hash is claimed to have particularly poor clustering behavior Cryptographic hash functions are believed to provide good hash functions for any table size s either by modulo reduction or by bit masking They may also be appropriate if there is a risk of malicious users trying to sabotage a network service by submitting requests designed to generate a large number of collisions in the server s hash tables However the risk of sabotage can also be avoided by cheaper methods such as applying a secret salt to the data or using a universal hash function Perfect hash function edit If all keys are known ahead of time a perfect hash function can be used to create a perfect hash table that has no collisions If minimal perfect hashing is used every location in the hash table can be used as well Perfect hashing allows for constant time lookups in the worst case This is in contrast to most chaining and open addressing methods where the time for lookup is low on average but may be very large proportional to the number of entries for some sets of keys Key statistics edit A critical statistic for a hash table is called the load factor This is simply the number of entries divided by the number of buckets that is n k where n is the number of entries and k is the number of buckets If the load factor is kept reasonable the hash table should perform well provided the hashing is good If the load factor grows too large the hash table will become slow or it may fail to work depending on the method used The expected constant time property of a hash table assumes that the load factor is kept below some bound For a fixed number of buckets the time for a lookup grows with the number of entries and so does not achieve the desired constant time Second to that one can examine the variance of number of entries per bucket For example two tables both have entries and buckets one has exactly one entry in each bucket the other has all entries in the same bucket Clearly the hashing is not working in the second one A low load factor is not especially beneficial As the load factor approaches the proportion of unused areas in the hash table increases but there is not necessarily any reduction in search cost This results in wasted memory Collision resolution edit Hash collisions are practically unavoidable when hashing a random subset of a large set of possible keys For example if keys are hashed into a million buckets even with a perfectly uniform random distribution according to the birthday problem there is a chance of at least two of the keys being hashed to the same slot Therefore most hash table implementations have some collision resolution strategy to handle such events Some common strategies are described below All these methods require that the keys or pointers to them be stored in the table together with the associated values Separate chaining edit Hash collision resolved by separate chaining In the method known as separate chaining each bucket is independent and has some sort of list of entries with the same index The time for hash table operations is the time to find the bucket which is constant plus the time for the list operation The technique is also called open hashing or closed addressing In a good hash table each bucket has zero or one entries and sometimes two or three but rarely more than that Therefore structures that are efficient in time and space for these cases are preferred Structures that are efficient for a fairly large number of entries are not needed or desirable If these cases happen often the hashing is not working well and this needs to be fixed Separate chaining with linked lists edit Chained hash tables with linked lists are popular because they require only basic data structures with simple algorithms and can use simple hash functions that are unsuitable for other methods The cost of a table operation is that of scanning the entries of the selected bucket for the desired key If the distribution of keys is sufficiently uniform the average cost of a lookup depends only on the average number of keys per bucket that is on the load factor Chained hash tables remain effective even when the number of table entries n is much higher than the number of slots Their performance degrades more gracefully linearly with the load factor For example a chained hash table with slots and stored keys load factor is five to ten times slower than a slot table load factor but still times faster than a plain sequential list and possibly even faster than a balanced search tree citation needed For separate chaining the worst case scenario is when all entries are inserted into the same bucket in which case the hash table is ineffective and the cost is that of searching the bucket data structure If the latter is a linear list the lookup procedure may have to scan all its entries so the worst case cost is proportional to the number n of entries in the table The bucket chains are often implemented as ordered lists sorted by the key field this choice approximately halves the average cost of unsuccessful lookups compared to an unordered list citation needed However if some keys are much more likely to come up than others an unordered list with move to front heuristic may be more effective More sophisticated data structures such as balanced search trees are worth considering only if the load factor is large about or more or if the hash distribution is likely to be very non uniform or if one must guarantee good performance even in a worst case scenario However using a larger table and or a better hash function may be even more effective in those cases Chained hash tables also inherit the disadvantages of linked lists When storing small keys and values the space overhead of the next pointer in each entry record can be significant An additional disadvantage is that traversing a linked list has poor cache performance making the processor cache ineffective Separate chaining with list head cells edit Hash collision by separate chaining with head records in the bucket array Some chaining implementations store the first record of each chain in the slot array itself The number of pointer traversals is decreased by one for most cases The purpose is to increase cache efficiency of hash table access The disadvantage is that an empty bucket takes the same space as a bucket with one entry To save memory space such hash tables often have about as many slots as stored entries meaning that many slots have two or more entries Separate chaining with other structures edit Instead of a list one can use any other data structure that supports the required operations For example by using a self balancing tree the theoretical worst case time of common hash table operations insertion deletion lookup can be brought down to O log n rather than O n However this approach is only worth the trouble and extra memory cost if long delays must be avoided at all costs e g in a real time application or if one must guard against many entries hashed to the same slot e g if one expects extremely non uniform distributions or in the case of web sites or other publicly accessible services which are vulnerable to malicious key distributions in requests The variant called array hash table uses a dynamic array to store all the entries that hash to the same slot Each newly inserted entry gets appended to the end of the dynamic array that is assigned to the slot The dynamic array is resized in an exact fit manner meaning it is grown only by as many bytes as needed Alternative techniques such as growing the array by block sizes or pages were found to improve insertion performance but at a cost in space This variation makes more efficient use of CPU caching and the translation lookaside buffer TLB because slot entries are stored in sequential memory positions It also dispenses with the next pointers that are required by linked lists which saves space Despite frequent array resizing space overheads incurred by operating system such as memory fragmentation were found to be small An elaboration on this approach is the so called dynamic perfect hashing where a bucket that contains k entries is organized as a perfect hash table with k slots While it uses more memory n slots for n entries in the worst case and n k slots in the average case this variant has guaranteed constant worst case lookup time and low amortized time for insertion Open addressing edit Hash collision resolved by open addressing with linear probing interval Note that Ted Baker has a unique hash but nevertheless collided with Sandra Dee that had previously collided with John Smith In another strategy called open addressing all entry records are stored in the bucket array itself When a new entry has to be inserted the buckets are examined starting with the hashed to slot and proceeding in some probe sequence until an unoccupied slot is found When searching for an entry the buckets are scanned in the same sequence until either the target record is found or an unused array slot is found which indicates that there is no such key in the table The name open addressing refers to the fact that the location address of the item is not determined by its hash value This method is also called closed hashing it should not be confused with open hashing or closed addressing that usually mean separate chaining Well known probe sequences include Linear probing in which the interval between probes is fixed usually Quadratic probing in which the interval between probes is increased by adding the successive outputs of a quadratic polynomial to the starting value given by the original hash computation Double hashing in which the interval between probes is computed by another hash function A drawback of all these open addressing schemes is that the number of stored entries cannot exceed the number of slots in the bucket array In fact even with good hash functions their performance dramatically degrades when the load factor grows beyond or so Thus a more aggressive resize scheme is needed Separate linking works correctly with any load factor although performance is likely to be reasonable if it is kept below or so For many applications these restrictions mandate the use of dynamic resizing with its attendant costs Open addressing schemes also put more stringent requirements on the hash function besides distributing the keys more uniformly over the buckets the function must also minimize the clustering of hash values that are consecutive in the probe order Using separate chaining the only concern is that too many objects map to the same hash value whether they are adjacent or nearby is completely irrelevant Open addressing only saves memory if the entries are small less than four times the size of a pointer and the load factor is not too small If the load factor is close to zero that is there are far more buckets than stored entries open addressing is wasteful even if each entry is just two words This graph compares the average number of cache misses required to look up elements in tables with chaining and linear probing As the table passes the full mark linear probing s performance drastically degrades Open addressing avoids the time overhead of allocating each new entry record and can be implemented even in the absence of a memory allocator It also avoids the extra indirection required to access the first entry of each bucket that is usually the only one It also has better locality of reference particularly with linear probing With small record sizes these factors can yield better performance than chaining particularly for lookups Hash tables with open addressing are also easier to serialize because they do not use pointers On the other hand normal open addressing is a poor choice for large elements because these elements fill entire CPU cache lines negating the cache advantage and a large amount of space is wasted on large empty table slots If the open addressing table only stores references to elements external storage it uses space comparable to chaining even for large records but loses its speed advantage Generally speaking open addressing is better used for hash tables with small records that can be stored within the table internal storage and fit in a cache line They are particularly suitable for elements of one word or less If the table is expected to have a high load factor the records are large or the data is variable sized chained hash tables often perform as well or better Ultimately used sensibly any kind of hash table algorithm is usually fast enough and the percentage of a calculation spent in hash table code is low Memory usage is rarely considered excessive Therefore in most cases the differences between these algorithms are marginal and other considerations typically come into play citation needed Coalesced hashing edit A hybrid of chaining and open addressing coalesced hashing links together chains of nodes within the table itself Like open addressing it achieves space usage and somewhat diminished cache advantages over chaining Like chaining it does not exhibit clustering effects in fact the table can be efficiently filled to a high density Unlike chaining it cannot have more elements than table slots Cuckoo hashing edit Another alternative open addressing solution is cuckoo hashing which ensures constant lookup time in the worst case and constant amortized time for insertions and deletions It uses two or more hash functions which means any key value pair could be in two or more locations For lookup the first hash function is used if the key value is not found then the second hash function is used and so on If a collision happens during insertion then the key is re hashed with the second hash function to map it to another bucket If all hash functions are used and there is still a collision then the key it collided with is removed to make space for the new key and the old key is re hashed with one of the other hash functions which maps it to another bucket If that location also results in a collision then the process repeats until there is no collision or the process traverses all the buckets at which point the table is resized By combining multiple hash functions with multiple cells per bucket very high space utilisation can be achieved Robin Hood hashing edit One interesting variation on double hashing collision resolution is Robin Hood hashing The idea is that a new key may displace a key already inserted if its probe count is larger than that of the key at the current position The net effect of this is that it reduces worst case search times in the table This is similar to ordered hash tables except that the criterion for bumping a key does not depend on a direct relationship between the keys Since both the worst case and the variation in the number of probes is reduced dramatically an interesting variation is to probe the table starting at the expected successful probe value and then expand from that position in both directions External Robin Hashing is an extension of this algorithm where the table is stored in an external file and each table position corresponds to a fixed sized page or bucket with B records choice hashing edit choice hashing employs different hash functions h x and h x for the hash table Both hash functions are used to compute two table locations When an object is inserted in the table then it is placed in the table location that contains fewer objects with the default being the h x table location if there is equality in bucket size choice hashing employs the principle of the power of two choices Hopscotch hashing edit Another alternative open addressing solution is hopscotch hashing which combines the approaches of cuckoo hashing and linear probing yet seems in general to avoid their limitations In particular it works well even when the load factor grows beyond The algorithm is well suited for implementing a resizable concurrent hash table The hopscotch hashing algorithm works by defining a neighborhood of buckets near the original hashed bucket where a given entry is always found Thus search is limited to the number of entries in this neighborhood which is logarithmic in the worst case constant on average and with proper alignment of the neighborhood typically requires one cache miss When inserting an entry one first attempts to add it to a bucket in the neighborhood However if all buckets in this neighborhood are occupied the algorithm traverses buckets in sequence until an open slot an unoccupied bucket is found as in linear probing At that point since the empty bucket is outside the neighborhood items are repeatedly displaced in a sequence of hops This is similar to cuckoo hashing but with the difference that in this case the empty slot is being moved into the neighborhood instead of items being moved out with the hope of eventually finding an empty slot Each hop brings the open slot closer to the original neighborhood without invalidating the neighborhood property of any of the buckets along the way In the end the open slot has been moved into the neighborhood and the entry being inserted can be added to it Dynamic resizing edit To keep the load factor under a certain limit e g under many table implementations expand the table when items are inserted For example in Java s HashMap class the default load factor threshold for table expansion is Since buckets are usually implemented on top of a dynamic array and any constant proportion for resizing greater than will keep the load factor under the desired limit the exact choice of the constant is determined by the same space time tradeoff as for dynamic arrays Resizing is accompanied by a full or incremental table rehash whereby existing items are mapped to new bucket locations To limit the proportion of memory wasted due to empty buckets some implementations also shrink the size of the table followed by a rehash when items are deleted From the point of space time tradeoffs this operation is similar to the deallocation in dynamic arrays Resizing by copying all entries edit A common approach is to automatically trigger a complete resizing when the load factor exceeds some threshold r max Then a new larger table is allocated all the entries of the old table are removed and inserted into this new table and the old table is returned to the free storage pool Symmetrically when the load factor falls below a second threshold r min all entries are moved to a new smaller table If the table size increases or decreases by a fixed percentage at each expansion the total cost of these resizings amortized over all insert and delete operations is still a constant independent of the number of entries n and of the number m of operations performed For example consider a table that was created with the minimum possible size and is doubled each time the load ratio exceeds some threshold If m elements are inserted into that table the total number of extra re insertions that occur in all dynamic resizings of the table is at most m In other words dynamic resizing roughly doubles the cost of each insert or delete operation Incremental resizing edit Some hash table implementations notably in real time systems cannot pay the price of enlarging the hash table all at once because it may interrupt time critical operations If one cannot avoid dynamic resizing a solution is to perform the resizing gradually During the resize allocate the new hash table but keep the old table unchanged In each lookup or delete operation check both tables Perform insertion operations only in the new table At each insertion also move r elements from the old table to the new table When all elements are removed from the old table deallocate it To ensure that the old table is completely copied over before the new table itself needs to be enlarged it is necessary to increase the size of the table by a factor of at least r r during resizing Monotonic keys edit If it is known that key values will always increase or decrease monotonically then a variation of consistent hashing can be achieved by keeping a list of the single most recent key value at each hash table resize operation Upon lookup keys that fall in the ranges defined by these list entries are directed to the appropriate hash function and indeed hash table both of which can be different for each range Since it is common to grow the overall number of entries by doubling there will only be O lg N ranges to check and binary search time for the redirection would be O lg lg N As with consistent hashing this approach guarantees that any key s hash once issued will never change even when the hash table is later grown Other solutions edit Linear hashing is a hash table algorithm that permits incremental hash table expansion It is implemented using a single hash table but with two possible look up functions Another way to decrease the cost of table resizing is to choose a hash function in such a way that the hashes of most values do not change when the table is resized This approach called consistent hashing is prevalent in disk based and distributed hashes where rehashing is prohibitively costly Performance analysis edit In the simplest model the hash function is completely unspecified and the table does not resize For the best possible choice of hash function a table of size k with open addressing has no collisions and holds up to k elements with a single comparison for successful lookup and a table of size k with chaining and n keys has the minimum max n k collisions and O n k comparisons for lookup For the worst choice of hash function every insertion causes a collision and hash tables degenerate to linear search with n amortized comparisons per insertion and up to n comparisons for a successful lookup Adding rehashing to this model is straightforward As in a dynamic array geometric resizing by a factor of b implies that only n b i keys are inserted i or more times so that the total number of insertions is bounded above by bn b which is O n By using rehashing to maintain n lt k tables using both chaining and open addressing can have unlimited elements and perform successful lookup in a single comparison for the best choice of hash function In more realistic models the hash function is a random variable over a probability distribution of hash functions and performance is computed on average over the choice of hash function When this distribution is uniform the assumption is called simple uniform hashing and it can be shown that hashing with chaining requires n k comparisons on average for an unsuccessful lookup and hashing with open addressing requires n k Both these bounds are constant if we maintain n k lt c using table resizing where c is a fixed constant less than Features edit Advantages edit The main advantage of hash tables over other table data structures is speed This advantage is more apparent when the number of entries is large Hash tables are particularly efficient when the maximum number of entries can be predicted in advance so that the bucket array can be allocated once with the optimum size and never resized If the set of key value pairs is fixed and known ahead of time so insertions and deletions are not allowed one may reduce the average lookup cost by a careful choice of the hash function bucket table size and internal data structures In particular one may be able to devise a hash function that is collision free or even perfect see below In this case the keys need not be stored in the table Drawbacks edit Although operations on a hash table take constant time on average the cost of a good hash function can be significantly higher than the inner loop of the lookup algorithm for a sequential list or search tree Thus hash tables are not effective when the number of entries is very small However in some cases the high cost of computing the hash function can be mitigated by saving the hash value together with the key For certain string processing applications such as spell checking hash tables may be less efficient than tries finite automata or Judy arrays Also if each key is represented by a small enough number of bits then instead of a hash table one may use the key directly as the index into an array of values Note that there are no collisions in this case The entries stored in a hash table can be enumerated efficiently at constant cost per entry but only in some pseudo random order Therefore there is no efficient way to locate an entry whose key is nearest to a given key Listing all n entries in some specific order generally requires a separate sorting step whose cost is proportional to log n per entry In comparison ordered search trees have lookup and insertion cost proportional to log n but allow finding the nearest key at about the same cost and ordered enumeration of all entries at constant cost per entry If the keys are not stored because the hash function is collision free there may be no easy way to enumerate the keys that are present in the table at any given moment Although the average cost per operation is constant and fairly small the cost of a single operation may be quite high In particular if the hash table uses dynamic resizing an insertion or deletion operation may occasionally take time proportional to the number of entries This may be a serious drawback in real time or interactive applications Hash tables in general exhibit poor locality of reference that is the data to be accessed is distributed seemingly at random in memory Because hash tables cause access patterns that jump around this can trigger microprocessor cache misses that cause long delays Compact data structures such as arrays searched with linear search may be faster if the table is relatively small and keys are compact The optimal performance point varies from system to system Hash tables become quite inefficient when there are many collisions While extremely uneven hash distributions are extremely unlikely to arise by chance a malicious adversary with knowledge of the hash function may be able to supply information to a hash that creates worst case behavior by causing excessive collisions resulting in very poor performance e g a denial of service attack In critical applications universal hashing can be used a data structure with better worst case guarantees may be preferable Uses edit This section does not cite any references or sources Please help improve this section by adding citations to reliable sources Unsourced material may be challenged and removed July Associative arrays edit Hash tables are commonly used to implement many types of in memory tables They are used to implement associative arrays arrays whose indices are arbitrary strings or other complicated objects especially in interpreted programming languages like AWK Perl and PHP When storing a new item into a multimap and a hash collision occurs the multimap unconditionally stores both items When storing a new item into a typical associative array and a hash collision occurs but the actual keys themselves are different the associative array likewise stores both items However if the key of the new item exactly matches the key of an old item the associative array typically erases the old item and overwrites it with the new item so every item in the table has a unique key Database indexing edit Hash tables may also be used as disk based data structures and database indices such as in dbm although B trees are more popular in these applications Caches edit Hash tables can be used to implement caches auxiliary data tables that are used to speed up the access to data that is primarily stored in slower media In this application hash collisions can be handled by discarding one of the two colliding entries usually erasing the old item that is currently stored in the table and overwriting it with the new item so every item in the table has a unique hash value Sets edit Besides recovering the entry that has a given key many hash table implementations can also tell whether such an entry exists or not Those structures can therefore be used to implement a set data structure which merely records whether a given key belongs to a specified set of keys In this case the structure can be simplified by eliminating all parts that have to do with the entry values Hashing can be used to implement both static and dynamic sets Object representation edit Several dynamic languages such as Perl Python JavaScript and Ruby use hash tables to implement objects In this representation the keys are the names of the members and methods of the object and the values are pointers to the corresponding member or method Unique data representation edit Hash tables can be used by some programs to avoid creating multiple character strings with the same contents For that purpose all strings in use by the program are stored in a single string pool implemented as a hash table which is checked whenever a new string has to be created This technique was introduced in Lisp interpreters under the name hash consing and can be used with many other kinds of data expression trees in a symbolic algebra system records in a database files in a file system binary decision diagrams etc String interning edit Main article String interning Implementations edit In programming languages edit Many programming languages provide hash table functionality either as built in associative arrays or as standard library modules In C for example the unordered map class provides hash tables for keys and values of arbitrary type In PHP the Zend engine uses one of the hash functions from Daniel J Bernstein to generate the hash values used in managing the mappings of data pointers stored in a hash table In the PHP source code it is labelled as DJBX A Daniel J Bernstein Times with Addition Python s built in hash table implementation in the form of the dict type as well as Perl s hash type are highly optimized as they are used internally to implement namespaces In the NET Framework support for hash tables is provided via the non generic Hashtable and generic Dictionary classes which store key value pairs and the generic HashSet class which stores only values Independent packages edit SparseHash formerly Google SparseHash An extremely memory efficient hash map implementation with only bits entry of overhead The SparseHash library has several C hash map implementations with different performance characteristics including one that optimizes for memory use and another that optimizes for speed SunriseDD An open source C library for hash table storage of arbitrary data objects with lock free lookups built in reference counting and guaranteed order iteration The library can participate in external reference counting systems or use its own built in reference counting It comes with a variety of hash functions and allows the use of runtime supplied hash functions via callback mechanism Source code is well documented uthash This is an easy to use hash table for C structures History edit The idea of hashing arose independently in different places In January H P Luhn wrote an internal IBM memorandum that used hashing with chaining G N Amdahl E M Boehme N Rochester and Arthur Samuel implemented a program using hashing at about the same time Open addressing with linear probing relatively prime stepping is credited to Amdahl but Ershov in Russia had the same idea See also edit Rabin Karp string search algorithm Stable hashing Consistent hashing Extendible hashing Lazy deletion Pearson hashing Related data structures edit There are several data structures that use hash functions but cannot be considered special cases of hash tables Bloom filter memory efficient data structure designed for constant time approximate lookups uses hash function s and can be seen as an approximate hash table Distributed hash table DHT a resilient dynamic table spread over several nodes of a network Hash array mapped trie a trie structure similar to the array mapped trie but where each key is hashed first References edit Thomas H Cormen et al Introduction to Algorithms rd ed Massachusetts Institute of Technology pp ISBN Charles E Leiserson Amortized Algorithms Table Doubling Potential Method Lecture course MIT J J Introduction to Algorithms Fall a b Donald Knuth The Art of Computer Programming Sorting and Searching nd ed Addison Wesley pp ISBN a b Cormen Thomas H Leiserson Charles E Rivest Ronald L Stein Clifford Introduction to Algorithms nd ed MIT Press and McGraw Hill ISBN Cite uses deprecated parameters help Karl Pearson On the criterion that a given system of deviations from the probable in the case of a correlated system of variables is such that it can be reasonably supposed to have arisen from random sampling Philosophical Magazine Series pp Robin Plackett Karl Pearson and the Chi Squared Test International Statistical Review International Statistical Institute ISI pp a b Thomas Wang Prime Double Hash Table Retrieved April Askitis Nikolas Zobel Justin October Cache conscious Collision Resolution in String Hash Tables Proceedings of the th International Conference String Processing and Information Retrieval SPIRE pp doi ISBN Askitis Nikolas Sinha Ranjan Engineering scalable cache and space efficient tries for strings The VLDB Journal doi s ISSN Askitis Nikolas Fast and Compact Hash Tables for Integer Keys Proceedings of the nd Australasian Computer Science Conference ACSC pp ISBN Erik Demaine Jeff Lind Advanced Data Structures MIT Computer Science and Artificial Intelligence Laboratory Spring http courses csail mit edu spring scribe notes L lecture pdf a b Tenenbaum Aaron M Langsam Yedidyah Augenstein Moshe J Data Structures Using C Prentice Hall pp p ISBN Celis Pedro Robin Hood hashing Technical report Computer Science Department University of Waterloo CS Goossaert Emmanuel Robin Hood hashing Amble Ole Knuth Don Ordered hash tables Computer Journal Viola Alfredo October Exact distribution of individual displacements in linear probing hashing Transactions on Algorithms TALG ACM doi Celis Pedro March External Robin Hood Hashing Technical report Computer Science Department Indiana University TR Herlihy Maurice and Shavit Nir and Tzafrir Moran Hopscotch Hashing DISC Proceedings of the nd international symposium on Distributed Computing Berlin Heidelberg Springer Verlag pp Litwin Witold Linear hashing A new tool for file and table addressing Proc th Conference on Very Large Databases pp Doug Dunham CS Lecture Notes University of Minnesota Duluth Theorems Last modified April Alexander Klink and Julian W lde s Efficient Denial of Service Attacks on Web Application Platforms December th Chaos Communication Congress Berlin Germany Crosby and Wallach s Denial of Service via Algorithmic Complexity Attacks a b Mehta Dinesh P Sahni Sartaj Handbook of Datastructures and Applications pp ISBN Further reading edit Tamassia Roberto Michael T Goodrich Chapter Nine Maps and Dictionaries Data structures and algorithms in Java updated for Java th ed Hoboken N J Wiley pp ISBN Cite uses deprecated parameters help McKenzie B J R Harries T Bell Feb Selecting a hashing algorithm Software Practice amp Experience Cite uses deprecated parameters help External links edit Wikimedia Commons has media related to Hash tables A Hash Function for Hash Table Lookup by Bob Jenkins Hash Tables by SparkNotes explanation using C Hash functions by Paul Hsieh Design of Compact and Efficient Hash Tables for Java link not working Libhashish hash library NIST entry on hash tables Open addressing hash table removal algorithm from ICI programming language ici set unassign in set c and other occurrences with permission A basic explanation of how the hash table works by Reliable Software Lecture on Hash Tables Hash tables in C two simple and clear examples of hash tables implementation in C with linear probing and chaining Open Data Structures Chapter Hash Tables MIT s Introduction to Algorithms Hashing MIT OCW lecture Video MIT s Introduction to Algorithms Hashing MIT OCW lecture Video Java HashMap example How to sort a HashMap Java and keep the duplicate entries C code for Hashtable creation Gives C class code for Hashtable creation v t e Data structures Types Collection Container Abstract Associative array Double ended priority queue Double ended queue List Multimap Priority queue Queue Set multiset Disjoint Sets Stack Arrays Bit array Circular buffer Dynamic array Hash table Hashed array tree Sparse array Linked Association list Linked list Skip list Unrolled linked list XOR linked list Trees B tree Binary search tree AA AVL red black self balancing splay Heap binary binomial Fibonacci R tree R R Hilbert Trie Hash tree Graphs Binary decision diagram Directed acyclic word graph List of data structures Retrieved from http en wikipedia org w index php title Hash table amp oldid Categories Hashing Search algorithms Data structures Hidden categories Pages containing cite templates with deprecated parameters Use mdy dates from January All articles with unsourced statements Articles with unsourced statements from January Articles with unsourced statements from April Articles with unsourced statements from March Articles needing additional references from July All articles needing additional references Commons category with local link same as on Wikidata Articles with example C code Navigation menu Personal tools Create account Log in Namespaces Article Talk Variants Views Read Edit View history Actions Search Navigation Main page Contents Featured content Current events Random article Donate to Wikipedia Wikimedia Shop Interaction Help About Wikipedia Community portal Recent changes Contact page Tools What links here Related changes Upload file Special pages Permanent link Page information Data item Cite this page Print export Create a book Download as PDF Printable version Languages e tina Dansk Deutsch Eesti Espa ol Fran ais Hrvatski Italiano Latvie u Lietuvi Magyar Nederlands Norsk bokm l Norsk nynorsk Polski Portugu s Simple English Sloven ina srpski Suomi Svenska T rk e Ti ng Vi t Edit links This page was last modified on March at Text is available under the Creative Commons Attribution ShareAlike License additional terms may apply By using this site you agree to the Terms of Use and Privacy Policy Wikipedia is a registered trademark of the Wikimedia Foundation Inc a non profit organization Privacy policy About Wikipedia Disclaimers Contact Wikipedia Developers Mobile view if window mw mw loader state site loading user ready user groups ready if window mw mw loader load ext cite mobile desktop mediawiki action view postEdit mediawiki user mediawiki hidpi mediawiki page ready mediawiki searchSuggest ext gadget teahouse ext gadget ReferenceTooltips ext gadget DRN wizard ext gadget charinsert mw MwEmbedSupport style ext navigationTiming schema UniversalLanguageSelector ext uls eventlogger ext uls interlanguage skins vector collapsibleNav null true 