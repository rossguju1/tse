
http://old-www.cs.dartmouth.edu/~cs50/data/tse/wikipedia/wiki/Set_data_structure.html
2
Set abstract data type Wikipedia the free encyclopedia a lang ar a lang kk arab a lang mzn a lang ps a lang ur text decoration none cache key enwiki resourceloader filter minify css d a aa f a dc f be e if window mw mw config set wgCanonicalNamespace wgCanonicalSpecialPageName false wgNamespaceNumber wgPageName Set abstract data type wgTitle Set abstract data type wgCurRevisionId wgRevisionId wgArticleId wgIsArticle true wgIsRedirect false wgAction view wgUserName null wgUserGroups wgCategories Articles needing additional references from October All articles needing additional references Data types Composite data types Abstract data types wgBreakFrames false wgPageContentLanguage en wgPageContentModel wikitext wgSeparatorTransformTable wgDigitTransformTable wgDefaultDateFormat dmy wgMonthNames January February March April May June July August September October November December wgMonthNamesShort Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec wgRelevantPageName Set abstract data type wgIsProbablyEditable true wgRestrictionEdit wgRestrictionMove wgRedirectedFrom Set data structure wgWikiEditorEnabledModules toolbar true dialogs true hidesig true templateEditor false templates false preview false previewDialog false publish false toc false wgBetaFeaturesFeatures wgVisualEditor isPageWatched false magnifyClipIconURL bits wikimedia org static wmf skins common images magnify clip png pageLanguageCode en pageLanguageDir ltr svgMaxSize wikilove recipient wikilove anon wgGuidedTourHelpGuiderUrl Help Guided tours guider wgFlowTermsOfUseEdit By saving changes you agree to our u Ca class external text href wikimediafoundation org wiki Terms of use u ETerms of Use u C a u E and agree to irrevocably release your text under the u Ca rel nofollow class external text href creativecommons org licenses by sa u ECC BY SA License u C a u E and u Ca class external text href en wikipedia org wiki Wikipedia Text of the GNU Free Documentation License u EGFDL u C a u E wgULSAcceptLanguageList en us en wgULSCurrentAutonym English wgFlaggedRevsParams tags status levels quality pristine wgStableRevisionId null wgCategoryTreePageCategoryOptions mode hideprefix showcount true namespaces false wgNoticeProject wikipedia wgWikibaseItemId Q if window mw mw loader implement user options function mw user options set ccmeonemails cols date default diffonly disablemail editfont default editondblclick editsectiononrightclick enotifminoredits enotifrevealaddr enotifusertalkpages enotifwatchlistpages extendwatchlist fancysig forceeditsummary gender unknown hideminor hidepatrolled imagesize math minordefault newpageshidepatrolled nickname norollbackdiff numberheadings previewonfirst previewontop rcdays rclimit rememberpassword rows showhiddencats false shownumberswatching showtoolbar skin vector stubthreshold thumbsize underline uselivepreview usenewrc watchcreations watchdefault watchdeletion watchlistdays watchlisthideanons watchlisthidebots watchlisthideliu watchlisthideminor watchlisthideown watchlisthidepatrolled watchmoves wllimit useeditwarning prefershttps flaggedrevssimpleui flaggedrevsstable flaggedrevseditdiffs true flaggedrevsviewdiffs false usebetatoolbar usebetatoolbar cgd visualeditor enable visualeditor enable experimental visualeditor betatempdisable wikilove enabled echo subscriptions web page review true echo subscriptions email page review false ep showtoplink false ep bulkdelorgs false ep bulkdelcourses true ep showdyk true echo subscriptions web education program true echo subscriptions email education program false echo notify show link true echo show alert true echo email frequency echo email format html echo subscriptions email system true echo subscriptions web system true echo subscriptions email other false echo subscriptions web other true echo subscriptions email edit user talk false echo subscriptions web edit user talk true echo subscriptions email reverted false echo subscriptions web reverted true echo subscriptions email article linked false echo subscriptions web article linked false echo subscriptions email mention false echo subscriptions web mention true echo subscriptions web edit thank true echo subscriptions email edit thank false echo subscriptions web flow discussion true echo subscriptions email flow discussion false gettingstarted task toolbar show intro true uls preferences language en variant gan gan variant iu iu variant kk kk variant ku ku variant shi shi variant sr sr variant tg tg variant uz uz variant zh zh searchNs true searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false searchNs false gadget teahouse gadget ReferenceTooltips gadget DRN wizard gadget charinsert gadget mySandbox variant en mw loader implement user tokens function mw user tokens set editToken patrolToken false watchToken false cache key enwiki resourceloader filter minify js e d ede d d dc cd if window mw mw loader load mediawiki page startup mediawiki legacy wikibits mediawiki legacy ajax ext centralauth centralautologin skins vector compactPersonalBar defaultTracking ext visualEditor viewPageTarget init ext uls init ext uls interface wikibase client init ext centralNotice bannerController skins vector js body behavior url w static wmf skins vector csshover min htc Set abstract data type From Wikipedia the free encyclopedia Redirected from Set data structure Jump to navigation search This article needs additional citations for verification Please help improve this article by adding citations to reliable sources Unsourced material may be challenged and removed October In computer science a set is an abstract data structure that can store certain values without any particular order and no repeated values It is a computer implementation of the mathematical concept of a finite set Unlike most other collection types rather than retrieving a specific element from a set one typically tests a value for membership in a set Some set data structures are designed for static or frozen sets that do not change after they are constructed Static sets allow only query operations on their elements such as checking whether a given value is in the set or enumerating the values in some arbitrary order Other variants called dynamic or mutable sets allow also the insertion and deletion of elements from the set An abstract data structure is a collection or aggregate of data The data may be booleans numbers characters or other data structures If one considers the structure yielded by packaging or indexing there are four basic data structures unpackaged unindexed bunch packaged unindexed set unpackaged indexed string sequence packaged indexed list array In this view the contents of a set are a bunch and isolated data items are elementary bunches elements Whereas sets contain elements bunches consist of elements Further structuring may be achieved by considering the multiplicity of elements sets become multisets bunches become hyperbunches or their homogeneity a record is a set of fields not necessarily all of the same type Contents Implementations Type theory Operations Core set theoretical operations Static sets Dynamic sets Additional operations Implementations Language support In C Multiset Multisets in SQL See also References Implementations edit A set can be implemented in many ways For example one can use a list ignoring the order of the elements and taking care to avoid repeated values Sets are often implemented using various flavors of trees tries or hash tables A set can be seen and implemented as a partial associative array in which the value of each key value pair has the unit type Type theory edit In type theory sets are generally identified with their indicator function characteristic function accordingly a set of values of type may be denoted by or Subtypes and subsets may be modeled by refinement types and quotient sets may be replaced by setoids The characteristic function of a set is defined as In theory many other abstract data structures can be viewed as set structures with additional operations and or additional axioms imposed on the standard operations For example an abstract heap can be viewed as a set structure with a min S operation that returns the element of smallest value Operations edit Core set theoretical operations edit One may define the operations of the algebra of sets union S T returns the union of sets S and T intersection S T returns the intersection of sets S and T difference S T returns the difference of sets S and T subset S T a predicate that tests whether the set S is a subset of set T Static sets edit Typical operations that may be provided by a static set structure S are is element of x S checks whether the value x is in the set S is empty S checks whether the set S is empty size S or cardinality S returns the number of elements in S iterate S returns a function that returns one more value of S at each call in some arbitrary order enumerate S returns a list containing the elements of S in some arbitrary order build x x x n creates a set structure with values x x x n create from collection creates a new set structure containing all the elements of the given collection or all the elements returned by the given iterator Dynamic sets edit Dynamic set structures typically add create creates a new initially empty set structure create with capacity n creates a new set structure initially empty but capable of holding up to n elements add S x adds the element x to S if it is not present already remove S x removes the element x from S if it is present capacity S returns the maximum number of values that S can hold Some set structures may allow only some of these operations The cost of each operation will depend on the implementation and possibly also on the particular values stored in the set and the order in which they are inserted Additional operations edit There are many other operations that can in principle be defined in terms of the above such as pop S returns an arbitrary element of S deleting it from S map F S returns the set of distinct values resulting from applying function F to each element of S filter P S returns the subset containing all elements of S that satisfy a given predicate P fold A F S returns the value A S after applying A i F A i e for each element e of S clear S delete all elements of S equal S S checks whether the two given sets are equal i e contain all and only the same elements hash S returns a hash value for the static set S such that if equal S S then hash S hash S Other operations can be defined for sets with elements of a special type sum S returns the sum of all elements of S for some definition of sum For example over integers or reals it may be defined as fold add S nearest S x returns the element of S that is closest in value to x by some metric min S max S returns the minimum maximum element of S Implementations edit Sets can be implemented using various data structures which provide different time and space trade offs for various operations Some implementations are designed to improve the efficiency of very specialized operations such as nearest or union Implementations described as general use typically strive to optimize the element of add and delete operations As sets can be interpreted as a kind of map by the indicator function sets are commonly implemented in the same way as maps associative arrays namely a self balancing binary search tree for sorted sets which has O log n for most operations or a hash table for unsorted sets which has O average case but O n worst case for most operations A sorted linear hash table may be used to provide deterministically ordered sets Other popular methods include arrays In particular a subset of the integers n can be implemented efficiently as an n bit bit array which also support very efficient union and intersection operations A Bloom map implements a set probabilistically using a very compact representation but risking a small chance of false positives on queries The Boolean set operations can be implemented in terms of more elementary operations pop clear and add but specialized algorithms may yield lower asymptotic time bounds If sets are implemented as sorted lists for example the naive algorithm for union S T will take code proportional to the length m of S times the length n of T whereas a variant of the list merging algorithm will do the job in time proportional to m n Moreover there are specialized set data structures such as the union find data structure that are optimized for one or more of these operations at the expense of others Language support edit One of the earliest languages to support sets was Pascal many languages now include it whether in the core language or in a standard library Java offers the Set interface to support sets with the HashSet class implementing it using a hash table and the SortedSet sub interface to support sorted sets with the TreeSet class implementing it using a binary search tree Apple s Foundation framework part of Cocoa provides the Objective C classes NSSet NSMutableSet NSCountedSet NSOrderedSet and NSMutableOrderedSet The CoreFoundation APIs provide the CFSet and CFMutableSet types for use in C Python has built in set and frozenset types since and since Python and supports non empty set literals using a curly bracket syntax e g x y z The NET Framework provides the generic HashSet and SortedSet classes that implement the generic ISet interface Smalltalk s class library includes Set and IdentitySet using equality and identity for inclusion test respectively Many dialects provide variations for compressed storage NumberSet CharacterSet for ordering OrderedSet SortedSet etc or for weak references WeakIdentitySet Ruby s standard library includes a set module which contains Set and SortedSet classes that implement sets using hash tables the latter allowing iteration in sorted order OCaml s standard library contains a Set module which implements a functional set data structure using binary search trees The GHC implementation of Haskell provides a Data Set module which implements a functional set data structure using binary search trees The Tcl Tcllib package provides a set module which implements a set data structure based upon TCL lists As noted in the previous section in languages which do not directly support sets but do support associative arrays sets can be emulated using associative arrays by using the elements as keys and using a dummy value as the values which are ignored In C edit Main article set C In C the Standard Template Library STL provides the set template class which implements a sorted set using a binary search tree SGI s STL also provides the hash set template class which implements a set using a hash table In sets the elements themselves are the keys in contrast to sequenced containers where elements are accessed using their relative or absolute position Set elements must have a strict weak ordering Multiset edit A generalization of the notion of a set is that of a multiset or bag which is similar to a set but allows repeated equal values duplicates This is used in two distinct senses either equal values are considered identical and are simply counted or equal values are considered equivalent and are stored as distinct items For example given a list of people by name and ages in years one could construct a multiset of ages which simply counts the number of people of a given age Alternatively one can construct a multiset of people where two people are considered equivalent if their ages are the same but may be different people and have different names in which case each pair name age must be stored and selecting on a given age gives all the people of a given age Formally it is possible for objects in computer science to be considered equal under some equivalence relation but still distinct under another relation Some types of multiset implementations will store distinct equal objects as separate items in the data structure while others will collapse it down to one version the first one encountered and keep a positive integer count of the multiplicity of the element As with sets multisets can naturally be implemented using hash table or trees which yield different performance characteristics The set of all bags over type T is given by the expression bag T If by multiset one considers equal items identical and simply counts them then a multiset can be interpreted as a function from the input domain to the non negative integers natural numbers generalizing the identification of a set with its indicator function In some cases a multiset in this counting sense may be generalized to allow negative values as in Python C s Standard Template Library implements both sorted and unsorted multisets It provides the multiset class for the sorted multiset as a kind of associative container which implements this multiset using a self balancing binary search tree It provides the unordered multiset class for the unsorted multiset as a kind of unordered associative containers which implements this multiset using a hash table The unsorted multiset is standard as of C previously SGI s STL provides the hash multiset class which was copied and eventually standardized For Java third party libraries provide multiset functionality Apache Commons Collections provides the Bag and SortedBag interfaces with implementing classes like HashBag and TreeBag Google Guava provides the Multiset interface with implementing classes like HashMultiset and TreeMultiset Apple provides the NSCountedSet class as part of Cocoa and the CFBag and CFMutableBag types as part of CoreFoundation Python s standard library includes collections Counter which is similar to a multiset Smalltalk includes the Bag class which can be instantiated to use either identity or equality as predicate for inclusion test Where a multiset data structure is not available a workaround is to use a regular set but override the equality predicate of its items to always return not equal on distinct objects however such will still not be able to store multiple occurrences of the same object or use an associative array mapping the values to their integer multiplicities this will not be able to distinguish between equal elements at all Typical operations on bags contains B x checks whether the element x is present at least once in the bag B is sub bag B B checks whether each element in the bag B occurs in B no more often than it occurs in the bag B sometimes denoted as B B count B x returns the number of times that the element x occurs in the bag B sometimes denoted as B x scaled by B n given a natural number n returns a bag which contains the same elements as the bag B except that every element that occurs m times in B occurs n m times in the resulting bag sometimes denoted as n B union B B returns a bag that containing just those values that occur in either the bag B or the bag B except that the number of times a value x occurs in the resulting bag is equal to B x B x sometimes denoted as B B Multisets in SQL edit In relational databases a table can be a mathematical set or a multiset depending on the presence on unicity constraints on some columns which turns it into a candidate key SQL allows the selection of rows from a relational table this operation will in general yield a multiset unless the keyword DISTINCT is used to force the rows to be all different or the selection includes the primary or a candidate key In ANSI SQL the MULTISET keyword can be used to transform a subquery in a collection expression SELECT expression expression FROM TABLE NAME is a general select that can be used as subquery expression of another more general query while MULTISET SELECT expression expression FROM TABLE NAME transforms the subquery into a collection expression that can be used in another query or in assignment to a column of appropriate collection type See also edit Bloom filter Disjoint set References edit Packaging consists in supplying a container for an aggregation of objects in order to turn them into a single object Consider a function call without packaging a function can be called to act upon a bunch only by passing each bunch element as a separate argument which complicates the function s signature considerably and is just not possible in some programming languages By packaging the bunch s elements into a set the function may now be called upon a single elementary argument the set object the bunch s package Indexing is possible when the elements being considered are totally ordered Being without order the elements of a multiset for example do not have lesser greater or preceding succeeding relationships they can only be compared in absolute terms same different Hehner Eric C R Bunch Theory A Simple Set Theory for Computer Science Information Processing Letters doi Hehner Eric C R A Practical Theory of Programming second edition Hehner Eric C R A Practical Theory of Programming edition Wang Thomas Sorted Linear Hash Table v t e Data types Uninterpreted Bit Byte Trit Tryte Word Numeric Bignum Complex Decimal Fixed point Floating point Integer signedness Interval Rational Text Character String null terminated Pointer Address physical virtual Reference Composite Algebraic data type generalized Array Associative array Class Dependent Equality Inductive List Object metaobject Option type Product Record Set Union tagged Other Boolean Bottom type Collection Enumerated type Exception Function type Opaque data type Recursive data type Semaphore Stream Top type Type class Unit type Void Related topics Abstract data type Data structure Generic Kind metaclass Parametric polymorphism Primitive data type Protocol interface Subtyping Type constructor Type conversion Type system v t e Data structures Types Collection Container Abstract Associative array Double ended priority queue Double ended queue List Multimap Priority queue Queue Set multiset Disjoint Sets Stack Arrays Bit array Circular buffer Dynamic array Hash table Hashed array tree Sparse array Linked Association list Linked list Skip list Unrolled linked list XOR linked list Trees B tree Binary search tree AA AVL red black self balancing splay Heap binary binomial Fibonacci R tree R R Hilbert Trie Hash tree Graphs Binary decision diagram Directed acyclic word graph List of data structures Retrieved from http en wikipedia org w index php title Set abstract data type amp oldid Categories Data types Composite data types Abstract data types Hidden categories Articles needing additional references from October All articles needing additional references Navigation menu Personal tools Create account Log in Namespaces Article Talk Variants Views Read Edit View history Actions Search Navigation Main page Contents Featured content Current events Random article Donate to Wikipedia Wikimedia Shop Interaction Help About Wikipedia Community portal Recent changes Contact page Tools What links here Related changes Upload file Special pages Permanent link Page information Data item Cite this page Print export Create a book Download as PDF Printable version Languages Catal Deutsch Espa ol Italiano Nederlands Polski Portugu s Edit links This page was last modified on December at Text is available under the Creative Commons Attribution ShareAlike License additional terms may apply By using this site you agree to the Terms of Use and Privacy Policy Wikipedia is a registered trademark of the Wikimedia Foundation Inc a non profit organization Privacy policy About Wikipedia Disclaimers Contact Wikipedia Developers Mobile view if window mw mw loader state site loading user ready user groups ready if window mw mw loader load ext cite mobile desktop mediawiki action view postEdit mediawiki user mediawiki hidpi mediawiki page ready mediawiki searchSuggest ext gadget teahouse ext gadget ReferenceTooltips ext gadget DRN wizard ext gadget charinsert mw MwEmbedSupport style ext navigationTiming schema UniversalLanguageSelector ext uls eventlogger ext uls interlanguage skins vector collapsibleNav null true 